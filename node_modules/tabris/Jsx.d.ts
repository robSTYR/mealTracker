type Image = tabris.Image;
type Selector = tabris.Selector;

declare namespace JSX {

  function createElement(type: string|Function, properties: object, ...children: Array<ElementClass>): ElementClass;

  interface ElementClass extends tabris.Widget { }

  type Element = any;

  interface ElementAttributesProperty {
    jsxProperties: any;
  }
interface ActionSheetEvents extends PopupEvents {

  /**
   * Fired when the action sheet was closed.
   */
  onClose?: (event: tabris.EventObject<tabris.ActionSheet>) => void;

  /**
   * Fired when an action was selected.
   */
  onSelect?: (event: tabris.ActionSheetSelectEvent) => void;

  /**
   * Fired when the [*actions*](#actions) property has changed.
   * @param value The new value of [*actions*](#actions).
   */
  onActionsChanged?: (event: tabris.PropertyChangedEvent<tabris.ActionSheet, {title: string, image?: Image, style?: 'default'|'cancel'|'destructive'}[]>) => void;

  /**
   * Fired when the [*message*](#message) property has changed.
   * @param value The new value of [*message*](#message).
   */
  onMessageChanged?: (event: tabris.PropertyChangedEvent<tabris.ActionSheet, string>) => void;

  /**
   * Fired when the [*title*](#title) property has changed.
   * @param value The new value of [*title*](#title).
   */
  onTitleChanged?: (event: tabris.PropertyChangedEvent<tabris.ActionSheet, string>) => void;
}

interface AlertDialogEvents extends PopupEvents {

  /**
   * Fired when the dialog was closed for any reason.
   */
  onClose?: (event: tabris.AlertDialogCloseEvent) => void;

  /**
   * Fired when the dialog was closed by pressing the 'cancel' button.
   */
  onCloseCancel?: (event: tabris.EventObject<tabris.AlertDialog>) => void;

  /**
   * Fired when the dialog was closed by pressing the 'neutral' button.
   */
  onCloseNeutral?: (event: tabris.EventObject<tabris.AlertDialog>) => void;

  /**
   * Fired when the dialog was closed by pressing the 'ok' button.
   */
  onCloseOk?: (event: tabris.EventObject<tabris.AlertDialog>) => void;

  /**
   * Fired when the [*buttons*](#buttons) property has changed.
   * @param value The new value of [*buttons*](#buttons).
   */
  onButtonsChanged?: (event: tabris.PropertyChangedEvent<tabris.AlertDialog, {ok?: string, cancel?: string, neutral?: string}>) => void;

  /**
   * Fired when the [*message*](#message) property has changed.
   * @param value The new value of [*message*](#message).
   */
  onMessageChanged?: (event: tabris.PropertyChangedEvent<tabris.AlertDialog, string>) => void;

  /**
   * Fired when the [*title*](#title) property has changed.
   * @param value The new value of [*title*](#title).
   */
  onTitleChanged?: (event: tabris.PropertyChangedEvent<tabris.AlertDialog, string>) => void;
}

interface AppEvents extends NativeObjectEvents {

  /**
   * Fired when the back button is pressed on Android.
   */
  onBackNavigation?: (event: tabris.AppBackNavigationEvent) => void;

  /**
   * Fired when the app becomes invisible. Either because another app is in the foreground or the user has
   * returned to the home screen.
   */
  onBackground?: (event: tabris.EventObject<tabris.App>) => void;

  /**
   * The event is fired when the app starts or when it returns from the background.
   */
  onForeground?: (event: tabris.EventObject<tabris.App>) => void;

  /**
   * Fired when the app is not the interaction target of the user anymore. Usually preceded by `resume`.
   */
  onPause?: (event: tabris.EventObject<tabris.App>) => void;

  /**
   * Fired when the app is visible and ready to interact with the user. The event is preceded by either
   * `foreground` (the app becomes visible again) or `pause` (the app regains ability to interact with
   * user).
   */
  onResume?: (event: tabris.EventObject<tabris.App>) => void;

  /**
   * Fired when the app is being destroyed. After this callback no more interaction with the app is
   * possible.
   */
  onTerminate?: (event: tabris.EventObject<tabris.App>) => void;

  /**
   * Fired when the [*id*](#id) property has changed.
   * @param value The new value of [*id*](#id).
   */
  onIdChanged?: (event: tabris.PropertyChangedEvent<tabris.App, string>) => void;

  /**
   * Fired when the [*pinnedCertificates*](#pinnedCertificates) property has changed.
   * @param value The new value of [*pinnedCertificates*](#pinnedCertificates).
   */
  onPinnedCertificatesChanged?: (event: tabris.PropertyChangedEvent<tabris.App, any[]>) => void;

  /**
   * Fired when the [*version*](#version) property has changed.
   * @param value The new value of [*version*](#version).
   */
  onVersionChanged?: (event: tabris.PropertyChangedEvent<tabris.App, string>) => void;

  /**
   * Fired when the [*versionCode*](#versionCode) property has changed.
   * @param value The new value of [*versionCode*](#versionCode).
   */
  onVersionCodeChanged?: (event: tabris.PropertyChangedEvent<tabris.App, number>) => void;
}

interface CanvasContextEvents {
}

interface DateDialogEvents extends PopupEvents {

  /**
   * Fired when the date dialog was closed.
   */
  onClose?: (event: tabris.DateDialogCloseEvent) => void;

  /**
   * Fired when a date was selected by the user.
   */
  onSelect?: (event: tabris.DateDialogSelectEvent) => void;

  /**
   * Fired when the [*date*](#date) property has changed.
   * @param value The new value of [*date*](#date).
   */
  onDateChanged?: (event: tabris.PropertyChangedEvent<tabris.DateDialog, Date>) => void;

  /**
   * Fired when the [*maxDate*](#maxDate) property has changed.
   * @param value The new value of [*maxDate*](#maxDate).
   */
  onMaxDateChanged?: (event: tabris.PropertyChangedEvent<tabris.DateDialog, Date>) => void;

  /**
   * Fired when the [*minDate*](#minDate) property has changed.
   * @param value The new value of [*minDate*](#minDate).
   */
  onMinDateChanged?: (event: tabris.PropertyChangedEvent<tabris.DateDialog, Date>) => void;
}

interface DeviceEvents extends NativeObjectEvents {

  /**
   * Fired when the `orientation` property has changed and the rotation animation has finished.
   * @param value The new value of [*orientation*](#orientation).
   */
  onOrientationChanged?: (event: tabris.PropertyChangedEvent<tabris.Device, string>) => void;

  /**
   * Fired when the [*win_keyboardPresent*](#win_keyboardPresent) property has changed.
   * @param value The new value of [*win_keyboardPresent*](#win_keyboardPresent).
   */
  onWin_keyboardPresentChanged?: (event: tabris.PropertyChangedEvent<tabris.Device, boolean>) => void;

  /**
   * Fired when the [*win_primaryInput*](#win_primaryInput) property has changed.
   * @param value The new value of [*win_primaryInput*](#win_primaryInput).
   */
  onWin_primaryInputChanged?: (event: tabris.PropertyChangedEvent<tabris.Device, boolean>) => void;
}

interface EventObjectEvents {
}

interface FileSystemEvents extends NativeObjectEvents {
}

interface InactivityTimerEvents extends NativeObjectEvents {

  /**
   * Fired when the app has not been interacted with since the configured delay.
   */
  onTimeout?: (event: tabris.EventObject<tabris.InactivityTimer>) => void;

  /**
   * Fired when the [*delay*](#delay) property has changed.
   * @param value The new value of [*delay*](#delay).
   */
  onDelayChanged?: (event: tabris.PropertyChangedEvent<tabris.InactivityTimer, number>) => void;
}

interface NativeObjectEvents {
}

interface PopupEvents extends NativeObjectEvents {
}

interface PrinterEvents extends NativeObjectEvents {
}

interface TimeDialogEvents extends PopupEvents {

  /**
   * Fired when the time dialog was closed.
   */
  onClose?: (event: tabris.TimeDialogCloseEvent) => void;

  /**
   * Fired when a time was selected by the user.
   */
  onSelect?: (event: tabris.TimeDialogSelectEvent) => void;

  /**
   * Fired when the [*date*](#date) property has changed.
   * @param value The new value of [*date*](#date).
   */
  onDateChanged?: (event: tabris.PropertyChangedEvent<tabris.TimeDialog, Date>) => void;
}

interface UIEvents extends CompositeEvents {
}

interface WidgetCollectionEvents {
}

interface ActionEvents extends WidgetEvents {

  /**
   * Fired when the action is invoked.
   */
  onSelect?: (event: tabris.EventObject<tabris.Action>) => void;

  /**
   * Fired when the [*image*](#image) property has changed.
   * @param value The new value of [*image*](#image).
   */
  onImageChanged?: (event: tabris.PropertyChangedEvent<tabris.Action, tabris.Image>) => void;

  /**
   * Fired when the [*placementPriority*](#placementPriority) property has changed.
   * @param value The new value of [*placementPriority*](#placementPriority).
   */
  onPlacementPriorityChanged?: (event: tabris.PropertyChangedEvent<tabris.Action, string>) => void;

  /**
   * Fired when the [*title*](#title) property has changed.
   * @param value The new value of [*title*](#title).
   */
  onTitleChanged?: (event: tabris.PropertyChangedEvent<tabris.Action, string>) => void;

  /**
   * Fired when the [*win_symbol*](#win_symbol) property has changed.
   * @param value The new value of [*win_symbol*](#win_symbol).
   */
  onWin_symbolChanged?: (event: tabris.PropertyChangedEvent<tabris.Action, string>) => void;
}

interface ActivityIndicatorEvents extends WidgetEvents {

  /**
   * Fired when the [*tintColor*](#tintColor) property has changed.
   * @param value The new value of [*tintColor*](#tintColor).
   */
  onTintColorChanged?: (event: tabris.PropertyChangedEvent<tabris.ActivityIndicator, tabris.Color>) => void;
}

interface ButtonEvents extends WidgetEvents {

  /**
   * Fired when the button is pressed.
   */
  onSelect?: (event: tabris.EventObject<tabris.Button>) => void;

  /**
   * Fired when the [*alignment*](#alignment) property has changed.
   * @param value The new value of [*alignment*](#alignment).
   */
  onAlignmentChanged?: (event: tabris.PropertyChangedEvent<tabris.Button, string>) => void;

  /**
   * Fired when the [*image*](#image) property has changed.
   * @param value The new value of [*image*](#image).
   */
  onImageChanged?: (event: tabris.PropertyChangedEvent<tabris.Button, tabris.Image>) => void;

  /**
   * Fired when the [*text*](#text) property has changed.
   * @param value The new value of [*text*](#text).
   */
  onTextChanged?: (event: tabris.PropertyChangedEvent<tabris.Button, string>) => void;

  /**
   * Fired when the [*textColor*](#textColor) property has changed.
   * @param value The new value of [*textColor*](#textColor).
   */
  onTextColorChanged?: (event: tabris.PropertyChangedEvent<tabris.Button, tabris.Color>) => void;
}

interface CanvasEvents extends CompositeEvents {
}

interface CheckBoxEvents extends WidgetEvents {

  /**
   * Fired when the check box is checked or unchecked by the user.
   */
  onSelect?: (event: tabris.CheckBoxSelectEvent) => void;

  /**
   * Fired when the [*checked*](#checked) property has changed.
   * @param value The new value of [*checked*](#checked).
   */
  onCheckedChanged?: (event: tabris.PropertyChangedEvent<tabris.CheckBox, boolean>) => void;

  /**
   * Fired when the [*checkedTintColor*](#checkedTintColor) property has changed.
   * @param value The new value of [*checkedTintColor*](#checkedTintColor).
   */
  onCheckedTintColorChanged?: (event: tabris.PropertyChangedEvent<tabris.CheckBox, tabris.Color>) => void;

  /**
   * Fired when the [*text*](#text) property has changed.
   * @param value The new value of [*text*](#text).
   */
  onTextChanged?: (event: tabris.PropertyChangedEvent<tabris.CheckBox, string>) => void;

  /**
   * Fired when the [*textColor*](#textColor) property has changed.
   * @param value The new value of [*textColor*](#textColor).
   */
  onTextColorChanged?: (event: tabris.PropertyChangedEvent<tabris.CheckBox, tabris.Color>) => void;

  /**
   * Fired when the [*tintColor*](#tintColor) property has changed.
   * @param value The new value of [*tintColor*](#tintColor).
   */
  onTintColorChanged?: (event: tabris.PropertyChangedEvent<tabris.CheckBox, tabris.Color>) => void;
}

interface CollectionViewEvents extends WidgetEvents {

  /**
   * Fired when the user requested a refresh. An event listener should reset the *refreshIndicator*
   * property when refresh is finished.
   */
  onRefresh?: (event: tabris.EventObject<tabris.CollectionView>) => void;

  /**
   * Fired while the collection view is scrolling.
   */
  onScroll?: (event: tabris.CollectionViewScrollEvent) => void;

  /**
   * Fired when a cell is selected.
   */
  onSelect?: (event: tabris.CollectionViewSelectEvent) => void;

  /**
   * Fired when the [*cellHeight*](#cellHeight) property has changed.
   * @param value The new value of [*cellHeight*](#cellHeight).
   */
  onCellHeightChanged?: (event: tabris.PropertyChangedEvent<tabris.CollectionView, number|"auto"|((index: number, cellType: string) => number|"auto")>) => void;

  /**
   * Fired when the [*cellType*](#cellType) property has changed.
   * @param value The new value of [*cellType*](#cellType).
   */
  onCellTypeChanged?: (event: tabris.PropertyChangedEvent<tabris.CollectionView, string|((index: number) => string)|null>) => void;

  /**
   * Fired when the [*columnCount*](#columnCount) property has changed.
   * @param value The new value of [*columnCount*](#columnCount).
   */
  onColumnCountChanged?: (event: tabris.PropertyChangedEvent<tabris.CollectionView, number>) => void;

  /**
   * Fired when the [*firstVisibleIndex*](#firstVisibleIndex) property has changed.
   * @param value The new value of [*firstVisibleIndex*](#firstVisibleIndex).
   */
  onFirstVisibleIndexChanged?: (event: tabris.PropertyChangedEvent<tabris.CollectionView, number>) => void;

  /**
   * Fired when the [*itemCount*](#itemCount) property has changed.
   * @param value The new value of [*itemCount*](#itemCount).
   */
  onItemCountChanged?: (event: tabris.PropertyChangedEvent<tabris.CollectionView, number>) => void;

  /**
   * Fired when the [*lastVisibleIndex*](#lastVisibleIndex) property has changed.
   * @param value The new value of [*lastVisibleIndex*](#lastVisibleIndex).
   */
  onLastVisibleIndexChanged?: (event: tabris.PropertyChangedEvent<tabris.CollectionView, number>) => void;

  /**
   * Fired when the [*refreshEnabled*](#refreshEnabled) property has changed.
   * @param value The new value of [*refreshEnabled*](#refreshEnabled).
   */
  onRefreshEnabledChanged?: (event: tabris.PropertyChangedEvent<tabris.CollectionView, boolean>) => void;

  /**
   * Fired when the [*refreshIndicator*](#refreshIndicator) property has changed.
   * @param value The new value of [*refreshIndicator*](#refreshIndicator).
   */
  onRefreshIndicatorChanged?: (event: tabris.PropertyChangedEvent<tabris.CollectionView, boolean>) => void;

  /**
   * Fired when the [*refreshMessage*](#refreshMessage) property has changed.
   * @param value The new value of [*refreshMessage*](#refreshMessage).
   */
  onRefreshMessageChanged?: (event: tabris.PropertyChangedEvent<tabris.CollectionView, string>) => void;
}

interface CompositeEvents extends WidgetEvents {

  /**
   * Fired when a child is added to this widget.
   */
  onAddChild?: (event: tabris.CompositeAddChildEvent) => void;

  /**
   * Fired when a child is removed from this widget.
   */
  onRemoveChild?: (event: tabris.CompositeRemoveChildEvent) => void;

  /**
   * Fired when the [*padding*](#padding) property has changed.
   * @param value The new value of [*padding*](#padding).
   */
  onPaddingChanged?: (event: tabris.PropertyChangedEvent<tabris.Composite, tabris.BoxDimensions|number>) => void;
}

interface DrawerEvents extends CompositeEvents {

  /**
   * Fired when the drawer is closed and has reached its resting position.
   */
  onClose?: (event: tabris.EventObject<tabris.Drawer>) => void;

  /**
   * Fired when the drawer is opened and has reached its resting position.
   */
  onOpen?: (event: tabris.EventObject<tabris.Drawer>) => void;

  /**
   * Fired when the [*enabled*](#enabled) property has changed.
   * @param value The new value of [*enabled*](#enabled).
   */
  onEnabledChanged?: (event: tabris.PropertyChangedEvent<tabris.Drawer, boolean>) => void;

  /**
   * Fired when the [*win_displayMode*](#win_displayMode) property has changed.
   * @param value The new value of [*win_displayMode*](#win_displayMode).
   */
  onWin_displayModeChanged?: (event: tabris.PropertyChangedEvent<tabris.Drawer, string>) => void;

  /**
   * Fired when the [*win_targetView*](#win_targetView) property has changed.
   * @param value The new value of [*win_targetView*](#win_targetView).
   */
  onWin_targetViewChanged?: (event: tabris.PropertyChangedEvent<tabris.Drawer, tabris.Widget>) => void;
}

interface ImageViewEvents extends WidgetEvents {

  /**
   * Fired when the image loading has finished.
   */
  onLoad?: (event: tabris.ImageViewLoadEvent) => void;

  /**
   * Fired when the user zooms the image in or out. The `zoom` event indicates a change to the `zoomLevel`
   * property.
   */
  onZoom?: (event: tabris.ImageViewZoomEvent) => void;

  /**
   * Fired when the [*image*](#image) property has changed.
   * @param value The new value of [*image*](#image).
   */
  onImageChanged?: (event: tabris.PropertyChangedEvent<tabris.ImageView, tabris.Image>) => void;

  /**
   * Fired when the [*maxZoomLevel*](#maxZoomLevel) property has changed.
   * @param value The new value of [*maxZoomLevel*](#maxZoomLevel).
   */
  onMaxZoomLevelChanged?: (event: tabris.PropertyChangedEvent<tabris.ImageView, number>) => void;

  /**
   * Fired when the [*minZoomLevel*](#minZoomLevel) property has changed.
   * @param value The new value of [*minZoomLevel*](#minZoomLevel).
   */
  onMinZoomLevelChanged?: (event: tabris.PropertyChangedEvent<tabris.ImageView, number>) => void;

  /**
   * Fired when the [*scaleMode*](#scaleMode) property has changed.
   * @param value The new value of [*scaleMode*](#scaleMode).
   */
  onScaleModeChanged?: (event: tabris.PropertyChangedEvent<tabris.ImageView, string>) => void;

  /**
   * Fired when the [*tintColor*](#tintColor) property has changed.
   * @param value The new value of [*tintColor*](#tintColor).
   */
  onTintColorChanged?: (event: tabris.PropertyChangedEvent<tabris.ImageView, tabris.Color>) => void;

  /**
   * Fired when the [*zoomEnabled*](#zoomEnabled) property has changed.
   * @param value The new value of [*zoomEnabled*](#zoomEnabled).
   */
  onZoomEnabledChanged?: (event: tabris.PropertyChangedEvent<tabris.ImageView, boolean>) => void;

  /**
   * Fired when the [*zoomLevel*](#zoomLevel) property has changed.
   * @param value The new value of [*zoomLevel*](#zoomLevel).
   */
  onZoomLevelChanged?: (event: tabris.PropertyChangedEvent<tabris.ImageView, number>) => void;
}

interface NavigationBarEvents extends WidgetEvents {

  /**
   * Fired when the [*background*](#background) property has changed.
   * @param value The new value of [*background*](#background).
   */
  onBackgroundChanged?: (event: tabris.PropertyChangedEvent<tabris.NavigationBar, tabris.Color>) => void;

  /**
   * Fired when the [*displayMode*](#displayMode) property has changed.
   * @param value The new value of [*displayMode*](#displayMode).
   */
  onDisplayModeChanged?: (event: tabris.PropertyChangedEvent<tabris.NavigationBar, string>) => void;

  /**
   * Fired when the [*theme*](#theme) property has changed.
   * @param value The new value of [*theme*](#theme).
   */
  onThemeChanged?: (event: tabris.PropertyChangedEvent<tabris.NavigationBar, string>) => void;
}

interface NavigationViewEvents extends CompositeEvents {

  /**
   * Fired when the [*actionColor*](#actionColor) property has changed.
   * @param value The new value of [*actionColor*](#actionColor).
   */
  onActionColorChanged?: (event: tabris.PropertyChangedEvent<tabris.NavigationView, tabris.Color>) => void;

  /**
   * Fired when the [*actionTextColor*](#actionTextColor) property has changed.
   * @param value The new value of [*actionTextColor*](#actionTextColor).
   */
  onActionTextColorChanged?: (event: tabris.PropertyChangedEvent<tabris.NavigationView, tabris.Color>) => void;

  /**
   * Fired when the height of the bottom toolbar changes, e.g. if it changes visibility.
   * @param value The new value of [*bottomToolbarHeight*](#bottomToolbarHeight).
   */
  onBottomToolbarHeightChanged?: (event: tabris.PropertyChangedEvent<tabris.NavigationView, number>) => void;

  /**
   * Fired when the [*drawerActionVisible*](#drawerActionVisible) property has changed.
   * @param value The new value of [*drawerActionVisible*](#drawerActionVisible).
   */
  onDrawerActionVisibleChanged?: (event: tabris.PropertyChangedEvent<tabris.NavigationView, boolean>) => void;

  /**
   * Fired when the [*pageAnimation*](#pageAnimation) property has changed.
   * @param value The new value of [*pageAnimation*](#pageAnimation).
   */
  onPageAnimationChanged?: (event: tabris.PropertyChangedEvent<tabris.NavigationView, string>) => void;

  /**
   * Fired when the [*titleTextColor*](#titleTextColor) property has changed.
   * @param value The new value of [*titleTextColor*](#titleTextColor).
   */
  onTitleTextColorChanged?: (event: tabris.PropertyChangedEvent<tabris.NavigationView, tabris.Color>) => void;

  /**
   * Fired when the [*toolbarColor*](#toolbarColor) property has changed.
   * @param value The new value of [*toolbarColor*](#toolbarColor).
   */
  onToolbarColorChanged?: (event: tabris.PropertyChangedEvent<tabris.NavigationView, tabris.Color>) => void;

  /**
   * Fired when the [*toolbarVisible*](#toolbarVisible) property has changed.
   * @param value The new value of [*toolbarVisible*](#toolbarVisible).
   */
  onToolbarVisibleChanged?: (event: tabris.PropertyChangedEvent<tabris.NavigationView, boolean>) => void;

  /**
   * Fired when the height of the top toolbar changes, e.g. if it changes visibility.
   * @param value The new value of [*topToolbarHeight*](#topToolbarHeight).
   */
  onTopToolbarHeightChanged?: (event: tabris.PropertyChangedEvent<tabris.NavigationView, number>) => void;

  /**
   * Fired when the [*win_drawerActionBackground*](#win_drawerActionBackground) property has changed.
   * @param value The new value of [*win_drawerActionBackground*](#win_drawerActionBackground).
   */
  onWin_drawerActionBackgroundChanged?: (event: tabris.PropertyChangedEvent<tabris.NavigationView, tabris.Color>) => void;

  /**
   * Fired when the [*win_drawerActionTheme*](#win_drawerActionTheme) property has changed.
   * @param value The new value of [*win_drawerActionTheme*](#win_drawerActionTheme).
   */
  onWin_drawerActionThemeChanged?: (event: tabris.PropertyChangedEvent<tabris.NavigationView, string>) => void;

  /**
   * Fired when the [*win_toolbarOverflowTheme*](#win_toolbarOverflowTheme) property has changed.
   * @param value The new value of [*win_toolbarOverflowTheme*](#win_toolbarOverflowTheme).
   */
  onWin_toolbarOverflowThemeChanged?: (event: tabris.PropertyChangedEvent<tabris.NavigationView, string>) => void;

  /**
   * Fired when the [*win_toolbarTheme*](#win_toolbarTheme) property has changed.
   * @param value The new value of [*win_toolbarTheme*](#win_toolbarTheme).
   */
  onWin_toolbarThemeChanged?: (event: tabris.PropertyChangedEvent<tabris.NavigationView, string>) => void;
}

interface PageEvents extends CompositeEvents {

  /**
   * Fired when the page is about to become visible, i.e. it has become the active page.
   */
  onAppear?: (event: tabris.EventObject<tabris.Page>) => void;

  /**
   * Fired when the page is no longer visible, i.e. another page has become the active page.
   */
  onDisappear?: (event: tabris.EventObject<tabris.Page>) => void;

  /**
   * Fired when the [*autoDispose*](#autoDispose) property has changed.
   * @param value The new value of [*autoDispose*](#autoDispose).
   */
  onAutoDisposeChanged?: (event: tabris.PropertyChangedEvent<tabris.Page, boolean>) => void;

  /**
   * Fired when the [*image*](#image) property has changed.
   * @param value The new value of [*image*](#image).
   */
  onImageChanged?: (event: tabris.PropertyChangedEvent<tabris.Page, tabris.Image>) => void;

  /**
   * Fired when the [*title*](#title) property has changed.
   * @param value The new value of [*title*](#title).
   */
  onTitleChanged?: (event: tabris.PropertyChangedEvent<tabris.Page, string>) => void;
}

interface PickerEvents extends WidgetEvents {

  /**
   * Fired when an item was selected by the user.
   */
  onSelect?: (event: tabris.PickerSelectEvent) => void;

  /**
   * Fired when the [*borderColor*](#borderColor) property has changed.
   * @param value The new value of [*borderColor*](#borderColor).
   */
  onBorderColorChanged?: (event: tabris.PropertyChangedEvent<tabris.Picker, tabris.Color>) => void;

  /**
   * Fired when the [*fillColor*](#fillColor) property has changed.
   * @param value The new value of [*fillColor*](#fillColor).
   */
  onFillColorChanged?: (event: tabris.PropertyChangedEvent<tabris.Picker, tabris.Color>) => void;

  /**
   * Fired when the [*itemCount*](#itemCount) property has changed.
   * @param value The new value of [*itemCount*](#itemCount).
   */
  onItemCountChanged?: (event: tabris.PropertyChangedEvent<tabris.Picker, number>) => void;

  /**
   * Fired when the [*itemText*](#itemText) property has changed.
   * @param value The new value of [*itemText*](#itemText).
   */
  onItemTextChanged?: (event: tabris.PropertyChangedEvent<tabris.Picker, (index: number) => string>) => void;

  /**
   * Fired when the [*selectionIndex*](#selectionIndex) property has changed.
   * @param value The new value of [*selectionIndex*](#selectionIndex).
   */
  onSelectionIndexChanged?: (event: tabris.PropertyChangedEvent<tabris.Picker, number>) => void;

  /**
   * Fired when the [*textColor*](#textColor) property has changed.
   * @param value The new value of [*textColor*](#textColor).
   */
  onTextColorChanged?: (event: tabris.PropertyChangedEvent<tabris.Picker, tabris.Color>) => void;
}

interface ProgressBarEvents extends WidgetEvents {

  /**
   * Fired when the [*maximum*](#maximum) property has changed.
   * @param value The new value of [*maximum*](#maximum).
   */
  onMaximumChanged?: (event: tabris.PropertyChangedEvent<tabris.ProgressBar, number>) => void;

  /**
   * Fired when the [*minimum*](#minimum) property has changed.
   * @param value The new value of [*minimum*](#minimum).
   */
  onMinimumChanged?: (event: tabris.PropertyChangedEvent<tabris.ProgressBar, number>) => void;

  /**
   * Fired when the [*selection*](#selection) property has changed.
   * @param value The new value of [*selection*](#selection).
   */
  onSelectionChanged?: (event: tabris.PropertyChangedEvent<tabris.ProgressBar, number>) => void;

  /**
   * Fired when the [*state*](#state) property has changed.
   * @param value The new value of [*state*](#state).
   */
  onStateChanged?: (event: tabris.PropertyChangedEvent<tabris.ProgressBar, string>) => void;

  /**
   * Fired when the [*tintColor*](#tintColor) property has changed.
   * @param value The new value of [*tintColor*](#tintColor).
   */
  onTintColorChanged?: (event: tabris.PropertyChangedEvent<tabris.ProgressBar, tabris.Color>) => void;
}

interface RadioButtonEvents extends WidgetEvents {

  /**
   * Fired when the radio button is selected or deselected by the user.
   */
  onSelect?: (event: tabris.RadioButtonSelectEvent) => void;

  /**
   * Fired when the [*checked*](#checked) property has changed.
   * @param value The new value of [*checked*](#checked).
   */
  onCheckedChanged?: (event: tabris.PropertyChangedEvent<tabris.RadioButton, boolean>) => void;

  /**
   * Fired when the [*checkedTintColor*](#checkedTintColor) property has changed.
   * @param value The new value of [*checkedTintColor*](#checkedTintColor).
   */
  onCheckedTintColorChanged?: (event: tabris.PropertyChangedEvent<tabris.RadioButton, tabris.Color>) => void;

  /**
   * Fired when the [*text*](#text) property has changed.
   * @param value The new value of [*text*](#text).
   */
  onTextChanged?: (event: tabris.PropertyChangedEvent<tabris.RadioButton, string>) => void;

  /**
   * Fired when the [*textColor*](#textColor) property has changed.
   * @param value The new value of [*textColor*](#textColor).
   */
  onTextColorChanged?: (event: tabris.PropertyChangedEvent<tabris.RadioButton, tabris.Color>) => void;

  /**
   * Fired when the [*tintColor*](#tintColor) property has changed.
   * @param value The new value of [*tintColor*](#tintColor).
   */
  onTintColorChanged?: (event: tabris.PropertyChangedEvent<tabris.RadioButton, tabris.Color>) => void;
}

interface RefreshCompositeEvents extends CompositeEvents {

  /**
   * Fired when a refresh is triggered by the user.
   */
  onRefresh?: (event: tabris.EventObject<tabris.RefreshComposite>) => void;

  /**
   * Fired when the [*refreshEnabled*](#refreshEnabled) property has changed.
   * @param value The new value of [*refreshEnabled*](#refreshEnabled).
   */
  onRefreshEnabledChanged?: (event: tabris.PropertyChangedEvent<tabris.RefreshComposite, boolean>) => void;

  /**
   * Fired when the [*refreshIndicator*](#refreshIndicator) property has changed.
   * @param value The new value of [*refreshIndicator*](#refreshIndicator).
   */
  onRefreshIndicatorChanged?: (event: tabris.PropertyChangedEvent<tabris.RefreshComposite, boolean>) => void;

  /**
   * Fired when the [*refreshMessage*](#refreshMessage) property has changed.
   * @param value The new value of [*refreshMessage*](#refreshMessage).
   */
  onRefreshMessageChanged?: (event: tabris.PropertyChangedEvent<tabris.RefreshComposite, string>) => void;
}

interface ScrollViewEvents extends CompositeEvents {

  /**
   * Fired while scrolling horizontally.
   */
  onScrollX?: (event: tabris.ScrollViewScrollEvent) => void;

  /**
   * Fired while scrolling vertically.
   */
  onScrollY?: (event: tabris.ScrollViewScrollEvent) => void;

  /**
   * Fired when the [*offsetX*](#offsetX) property has changed.
   * @param value The new value of [*offsetX*](#offsetX).
   */
  onOffsetXChanged?: (event: tabris.PropertyChangedEvent<tabris.ScrollView, number>) => void;

  /**
   * Fired when the [*offsetY*](#offsetY) property has changed.
   * @param value The new value of [*offsetY*](#offsetY).
   */
  onOffsetYChanged?: (event: tabris.PropertyChangedEvent<tabris.ScrollView, number>) => void;
}

interface SearchActionEvents extends ActionEvents {

  /**
   * Fired when a text input has been submitted by pressing the keyboard's search key.
   */
  onAccept?: (event: tabris.SearchActionAcceptEvent) => void;

  /**
   * Fired when the user inputs text.
   */
  onInput?: (event: tabris.SearchActionInputEvent) => void;

  /**
   * Fired when the [*message*](#message) property has changed.
   * @param value The new value of [*message*](#message).
   */
  onMessageChanged?: (event: tabris.PropertyChangedEvent<tabris.SearchAction, string>) => void;

  /**
   * Fired when the [*proposals*](#proposals) property has changed.
   * @param value The new value of [*proposals*](#proposals).
   */
  onProposalsChanged?: (event: tabris.PropertyChangedEvent<tabris.SearchAction, string[]>) => void;

  /**
   * Fired when the [*text*](#text) property has changed.
   * @param value The new value of [*text*](#text).
   */
  onTextChanged?: (event: tabris.PropertyChangedEvent<tabris.SearchAction, string>) => void;
}

interface SliderEvents extends WidgetEvents {

  /**
   * Fired when the selection property is changed by the user.
   */
  onSelect?: (event: tabris.SliderSelectEvent) => void;

  /**
   * Fired when the [*maximum*](#maximum) property has changed.
   * @param value The new value of [*maximum*](#maximum).
   */
  onMaximumChanged?: (event: tabris.PropertyChangedEvent<tabris.Slider, number>) => void;

  /**
   * Fired when the [*minimum*](#minimum) property has changed.
   * @param value The new value of [*minimum*](#minimum).
   */
  onMinimumChanged?: (event: tabris.PropertyChangedEvent<tabris.Slider, number>) => void;

  /**
   * Fired when the [*selection*](#selection) property has changed.
   * @param value The new value of [*selection*](#selection).
   */
  onSelectionChanged?: (event: tabris.PropertyChangedEvent<tabris.Slider, number>) => void;

  /**
   * Fired when the [*tintColor*](#tintColor) property has changed.
   * @param value The new value of [*tintColor*](#tintColor).
   */
  onTintColorChanged?: (event: tabris.PropertyChangedEvent<tabris.Slider, tabris.Color>) => void;
}

interface StatusBarEvents extends WidgetEvents {

  /**
   * Fired when the [*background*](#background) property has changed.
   * @param value The new value of [*background*](#background).
   */
  onBackgroundChanged?: (event: tabris.PropertyChangedEvent<tabris.StatusBar, tabris.Color>) => void;

  /**
   * Fired when the [*displayMode*](#displayMode) property has changed.
   * @param value The new value of [*displayMode*](#displayMode).
   */
  onDisplayModeChanged?: (event: tabris.PropertyChangedEvent<tabris.StatusBar, string>) => void;

  /**
   * Fired when the [*theme*](#theme) property has changed.
   * @param value The new value of [*theme*](#theme).
   */
  onThemeChanged?: (event: tabris.PropertyChangedEvent<tabris.StatusBar, string>) => void;
}

interface SwitchEvents extends WidgetEvents {

  /**
   * Fired when the switch is toggled by the user.
   */
  onSelect?: (event: tabris.SwitchSelectEvent) => void;

  /**
   * Fired when the [*checked*](#checked) property has changed.
   * @param value The new value of [*checked*](#checked).
   */
  onCheckedChanged?: (event: tabris.PropertyChangedEvent<tabris.Switch, boolean>) => void;

  /**
   * Fired when the [*thumbOffColor*](#thumbOffColor) property has changed.
   * @param value The new value of [*thumbOffColor*](#thumbOffColor).
   */
  onThumbOffColorChanged?: (event: tabris.PropertyChangedEvent<tabris.Switch, tabris.Color>) => void;

  /**
   * Fired when the [*thumbOnColor*](#thumbOnColor) property has changed.
   * @param value The new value of [*thumbOnColor*](#thumbOnColor).
   */
  onThumbOnColorChanged?: (event: tabris.PropertyChangedEvent<tabris.Switch, tabris.Color>) => void;

  /**
   * Fired when the [*trackOffColor*](#trackOffColor) property has changed.
   * @param value The new value of [*trackOffColor*](#trackOffColor).
   */
  onTrackOffColorChanged?: (event: tabris.PropertyChangedEvent<tabris.Switch, tabris.Color>) => void;

  /**
   * Fired when the [*trackOnColor*](#trackOnColor) property has changed.
   * @param value The new value of [*trackOnColor*](#trackOnColor).
   */
  onTrackOnColorChanged?: (event: tabris.PropertyChangedEvent<tabris.Switch, tabris.Color>) => void;
}

interface TabEvents extends CompositeEvents {

  /**
   * Fired when the tab will become visible, i.e. the selection of its TabFolder.
   */
  onAppear?: (event: tabris.EventObject<tabris.Tab>) => void;

  /**
   * Fired when the tab is no longer visible, i.e. it no longer is the selection of its TabFolder.
   */
  onDisappear?: (event: tabris.EventObject<tabris.Tab>) => void;

  /**
   * Fired when the [*badge*](#badge) property has changed.
   * @param value The new value of [*badge*](#badge).
   */
  onBadgeChanged?: (event: tabris.PropertyChangedEvent<tabris.Tab, string>) => void;

  /**
   * Fired when the [*image*](#image) property has changed.
   * @param value The new value of [*image*](#image).
   */
  onImageChanged?: (event: tabris.PropertyChangedEvent<tabris.Tab, tabris.Image>) => void;

  /**
   * Fired when the [*selectedImage*](#selectedImage) property has changed.
   * @param value The new value of [*selectedImage*](#selectedImage).
   */
  onSelectedImageChanged?: (event: tabris.PropertyChangedEvent<tabris.Tab, tabris.Image>) => void;

  /**
   * Fired when the [*title*](#title) property has changed.
   * @param value The new value of [*title*](#title).
   */
  onTitleChanged?: (event: tabris.PropertyChangedEvent<tabris.Tab, string>) => void;
}

interface TabFolderEvents extends CompositeEvents {

  /**
   * Fired when `paging` is enabled and a tab is scrolled. The `event` parameter contains position
   * information relative to the currently selected `Tab`. Eg.: scrolling a 500px wide tab 10% to the left
   * sets `offset` to `50`. Scrolling 10% to the right sets `offset` to `-50`.
   */
  onScroll?: (event: tabris.TabFolderScrollEvent) => void;

  /**
   * Fired when the selection property changes by user interaction.
   */
  onSelect?: (event: tabris.TabFolderSelectEvent) => void;

  /**
   * Fired when the [*paging*](#paging) property has changed.
   * @param value The new value of [*paging*](#paging).
   */
  onPagingChanged?: (event: tabris.PropertyChangedEvent<tabris.TabFolder, boolean>) => void;

  /**
   * Fired when the [*selection*](#selection) property has changed.
   * @param value The new value of [*selection*](#selection).
   */
  onSelectionChanged?: (event: tabris.PropertyChangedEvent<tabris.TabFolder, tabris.Tab>) => void;

  /**
   * Fired when the [*textColor*](#textColor) property has changed.
   * @param value The new value of [*textColor*](#textColor).
   */
  onTextColorChanged?: (event: tabris.PropertyChangedEvent<tabris.TabFolder, tabris.Color>) => void;

  /**
   * Fired when the [*win_tabBarTheme*](#win_tabBarTheme) property has changed.
   * @param value The new value of [*win_tabBarTheme*](#win_tabBarTheme).
   */
  onWin_tabBarThemeChanged?: (event: tabris.PropertyChangedEvent<tabris.TabFolder, string>) => void;
}

interface TextInputEvents extends WidgetEvents {

  /**
   * Fired when a text input has been finished by pressing the keyboard's Enter key. The label of this key
   * may vary depending on the platform and locale.
   */
  onAccept?: (event: tabris.TextInputAcceptEvent) => void;

  /**
   * Fired when the widget lost focus.
   */
  onBlur?: (event: tabris.EventObject<tabris.TextInput>) => void;

  /**
   * Fired when the widget gains focus.
   */
  onFocus?: (event: tabris.EventObject<tabris.TextInput>) => void;

  /**
   * Fired when the text was changed by the user.
   */
  onInput?: (event: tabris.TextInputInputEvent) => void;

  /**
   * Fired when the [*alignment*](#alignment) property has changed.
   * @param value The new value of [*alignment*](#alignment).
   */
  onAlignmentChanged?: (event: tabris.PropertyChangedEvent<tabris.TextInput, string>) => void;

  /**
   * Fired when the [*autoCapitalize*](#autoCapitalize) property has changed.
   * @param value The new value of [*autoCapitalize*](#autoCapitalize).
   */
  onAutoCapitalizeChanged?: (event: tabris.PropertyChangedEvent<tabris.TextInput, any>) => void;

  /**
   * Fired when the [*autoCorrect*](#autoCorrect) property has changed.
   * @param value The new value of [*autoCorrect*](#autoCorrect).
   */
  onAutoCorrectChanged?: (event: tabris.PropertyChangedEvent<tabris.TextInput, boolean>) => void;

  /**
   * Fired when the [*borderColor*](#borderColor) property has changed.
   * @param value The new value of [*borderColor*](#borderColor).
   */
  onBorderColorChanged?: (event: tabris.PropertyChangedEvent<tabris.TextInput, tabris.Color>) => void;

  /**
   * Fired when the [*cursorColor*](#cursorColor) property has changed.
   * @param value The new value of [*cursorColor*](#cursorColor).
   */
  onCursorColorChanged?: (event: tabris.PropertyChangedEvent<tabris.TextInput, tabris.Color>) => void;

  /**
   * Fired when the [*editable*](#editable) property has changed.
   * @param value The new value of [*editable*](#editable).
   */
  onEditableChanged?: (event: tabris.PropertyChangedEvent<tabris.TextInput, boolean>) => void;

  /**
   * Fired when the [*enterKeyType*](#enterKeyType) property has changed.
   * @param value The new value of [*enterKeyType*](#enterKeyType).
   */
  onEnterKeyTypeChanged?: (event: tabris.PropertyChangedEvent<tabris.TextInput, string>) => void;

  /**
   * Fired when the [*fillColor*](#fillColor) property has changed.
   * @param value The new value of [*fillColor*](#fillColor).
   */
  onFillColorChanged?: (event: tabris.PropertyChangedEvent<tabris.TextInput, tabris.Color>) => void;

  /**
   * Fired when the [*focused*](#focused) property has changed.
   * @param value The new value of [*focused*](#focused).
   */
  onFocusedChanged?: (event: tabris.PropertyChangedEvent<tabris.TextInput, boolean>) => void;

  /**
   * Fired when the [*keepFocus*](#keepFocus) property has changed.
   * @param value The new value of [*keepFocus*](#keepFocus).
   */
  onKeepFocusChanged?: (event: tabris.PropertyChangedEvent<tabris.TextInput, boolean>) => void;

  /**
   * Fired when the [*keyboard*](#keyboard) property has changed.
   * @param value The new value of [*keyboard*](#keyboard).
   */
  onKeyboardChanged?: (event: tabris.PropertyChangedEvent<tabris.TextInput, string>) => void;

  /**
   * Fired when the [*message*](#message) property has changed.
   * @param value The new value of [*message*](#message).
   */
  onMessageChanged?: (event: tabris.PropertyChangedEvent<tabris.TextInput, string>) => void;

  /**
   * Fired when the [*revealPassword*](#revealPassword) property has changed.
   * @param value The new value of [*revealPassword*](#revealPassword).
   */
  onRevealPasswordChanged?: (event: tabris.PropertyChangedEvent<tabris.TextInput, boolean>) => void;

  /**
   * Fired when the [*text*](#text) property has changed.
   * @param value The new value of [*text*](#text).
   */
  onTextChanged?: (event: tabris.PropertyChangedEvent<tabris.TextInput, string>) => void;

  /**
   * Fired when the [*textColor*](#textColor) property has changed.
   * @param value The new value of [*textColor*](#textColor).
   */
  onTextColorChanged?: (event: tabris.PropertyChangedEvent<tabris.TextInput, tabris.Color>) => void;
}

interface TextViewEvents extends WidgetEvents {

  /**
   * Fired when the [*alignment*](#alignment) property has changed.
   * @param value The new value of [*alignment*](#alignment).
   */
  onAlignmentChanged?: (event: tabris.PropertyChangedEvent<tabris.TextView, string>) => void;

  /**
   * Fired when the [*lineSpacing*](#lineSpacing) property has changed.
   * @param value The new value of [*lineSpacing*](#lineSpacing).
   */
  onLineSpacingChanged?: (event: tabris.PropertyChangedEvent<tabris.TextView, number>) => void;

  /**
   * Fired when the [*maxLines*](#maxLines) property has changed.
   * @param value The new value of [*maxLines*](#maxLines).
   */
  onMaxLinesChanged?: (event: tabris.PropertyChangedEvent<tabris.TextView, number|null>) => void;

  /**
   * Fired when the [*selectable*](#selectable) property has changed.
   * @param value The new value of [*selectable*](#selectable).
   */
  onSelectableChanged?: (event: tabris.PropertyChangedEvent<tabris.TextView, boolean>) => void;

  /**
   * Fired when the [*text*](#text) property has changed.
   * @param value The new value of [*text*](#text).
   */
  onTextChanged?: (event: tabris.PropertyChangedEvent<tabris.TextView, string>) => void;

  /**
   * Fired when the [*textColor*](#textColor) property has changed.
   * @param value The new value of [*textColor*](#textColor).
   */
  onTextColorChanged?: (event: tabris.PropertyChangedEvent<tabris.TextView, tabris.Color>) => void;
}

interface ToggleButtonEvents extends WidgetEvents {

  /**
   * Fired when the toggle button is selected or deselected by the user.
   */
  onSelect?: (event: tabris.ToggleButtonSelectEvent) => void;

  /**
   * Fired when the [*alignment*](#alignment) property has changed.
   * @param value The new value of [*alignment*](#alignment).
   */
  onAlignmentChanged?: (event: tabris.PropertyChangedEvent<tabris.ToggleButton, string>) => void;

  /**
   * Fired when the [*checked*](#checked) property has changed.
   * @param value The new value of [*checked*](#checked).
   */
  onCheckedChanged?: (event: tabris.PropertyChangedEvent<tabris.ToggleButton, boolean>) => void;

  /**
   * Fired when the [*image*](#image) property has changed.
   * @param value The new value of [*image*](#image).
   */
  onImageChanged?: (event: tabris.PropertyChangedEvent<tabris.ToggleButton, tabris.Image>) => void;

  /**
   * Fired when the [*text*](#text) property has changed.
   * @param value The new value of [*text*](#text).
   */
  onTextChanged?: (event: tabris.PropertyChangedEvent<tabris.ToggleButton, string>) => void;

  /**
   * Fired when the [*textColor*](#textColor) property has changed.
   * @param value The new value of [*textColor*](#textColor).
   */
  onTextColorChanged?: (event: tabris.PropertyChangedEvent<tabris.ToggleButton, tabris.Color>) => void;
}

interface VideoEvents extends WidgetEvents {

  /**
   * Fired when the [*autoPlay*](#autoPlay) property has changed.
   * @param value The new value of [*autoPlay*](#autoPlay).
   */
  onAutoPlayChanged?: (event: tabris.PropertyChangedEvent<tabris.Video, boolean>) => void;

  /**
   * Fired when the [*controlsVisible*](#controlsVisible) property has changed.
   * @param value The new value of [*controlsVisible*](#controlsVisible).
   */
  onControlsVisibleChanged?: (event: tabris.PropertyChangedEvent<tabris.Video, boolean>) => void;

  /**
   * Fired when the [*duration*](#duration) property has changed.
   * @param value The new value of [*duration*](#duration).
   */
  onDurationChanged?: (event: tabris.PropertyChangedEvent<tabris.Video, number>) => void;

  /**
   * Fired when the [*position*](#position) property has changed.
   * @param value The new value of [*position*](#position).
   */
  onPositionChanged?: (event: tabris.PropertyChangedEvent<tabris.Video, number>) => void;

  /**
   * Fired when the [*speed*](#speed) property has changed.
   * @param value The new value of [*speed*](#speed).
   */
  onSpeedChanged?: (event: tabris.PropertyChangedEvent<tabris.Video, number>) => void;

  /**
   * Fired when the [*state*](#state) property has changed.
   * @param value The new value of [*state*](#state).
   */
  onStateChanged?: (event: tabris.PropertyChangedEvent<tabris.Video, string>) => void;

  /**
   * Fired when the [*url*](#url) property has changed.
   * @param value The new value of [*url*](#url).
   */
  onUrlChanged?: (event: tabris.PropertyChangedEvent<tabris.Video, string>) => void;
}

interface WebViewEvents extends WidgetEvents {

  /**
   * Fired when the WebView requests a download. The download event provides the properties `url`,
   * `mimeType`, `contentLength` and `contentDisposition`. Supported only on Android.
   */
  onDownload?: (event: tabris.WebViewDownloadEvent) => void;

  /**
   * Fired when the url has been loaded.
   */
  onLoad?: (event: tabris.EventObject<tabris.WebView>) => void;

  /**
   * Fired when a web message has been sent via `window.parent.postMessage(message, targetOrigin)` from
   * inside the `WebView`.
   */
  onMessage?: (event: tabris.WebViewMessageEvent) => void;

  /**
   * Fired when the WebView is about to navigate to a new URL.
   */
  onNavigate?: (event: tabris.WebViewNavigateEvent) => void;

  /**
   * Fired when the [*canGoBack*](#canGoBack) property has changed.
   * @param value The new value of [*canGoBack*](#canGoBack).
   */
  onCanGoBackChanged?: (event: tabris.PropertyChangedEvent<tabris.WebView, boolean>) => void;

  /**
   * Fired when the [*canGoForward*](#canGoForward) property has changed.
   * @param value The new value of [*canGoForward*](#canGoForward).
   */
  onCanGoForwardChanged?: (event: tabris.PropertyChangedEvent<tabris.WebView, boolean>) => void;

  /**
   * Fired when the [*html*](#html) property has changed.
   * @param value The new value of [*html*](#html).
   */
  onHtmlChanged?: (event: tabris.PropertyChangedEvent<tabris.WebView, string>) => void;

  /**
   * Fired when the [*url*](#url) property has changed.
   * @param value The new value of [*url*](#url).
   */
  onUrlChanged?: (event: tabris.PropertyChangedEvent<tabris.WebView, string>) => void;
}

interface WidgetEvents extends NativeObjectEvents {

  /**
   * Fired when the widget is about to be disposed. At this point the widget and its children are still
   * accessible.
   */
  onDispose?: (event: tabris.EventObject<tabris.Widget>) => void;

  /**
   * Fired after pressing a widget for a specific amount of time (about a second), and again on lifting
   * the finger.
   */
  onLongpress?: (event: tabris.WidgetLongpressEvent) => void;

  /**
   * Fired continuously after a finger touching the widget moved for a certain distance.
   */
  onPan?: (event: tabris.WidgetPanEvent) => void;

  /**
   * Fired when a finger starts moving down.
   */
  onPanDown?: (event: tabris.WidgetPanEvent) => void;

  /**
   * Fired when a finger starts moving left or right.
   */
  onPanHorizontal?: (event: tabris.WidgetPanEvent) => void;

  /**
   * Fired when a finger starts moving left.
   */
  onPanLeft?: (event: tabris.WidgetPanEvent) => void;

  /**
   * Fired when a finger starts moving right.
   */
  onPanRight?: (event: tabris.WidgetPanEvent) => void;

  /**
   * Fired when a finger starts moving up.
   */
  onPanUp?: (event: tabris.WidgetPanEvent) => void;

  /**
   * Fired when a finger starts moving up or down.
   */
  onPanVertical?: (event: tabris.WidgetPanEvent) => void;

  /**
   * Fired when the widget's size has changed. You can use this event to apply new
   * [*layoutData*](#layoutdata).
   */
  onResize?: (event: tabris.WidgetResizeEvent) => void;

  /**
   * Fired when a finger moves down quickly.
   */
  onSwipeDown?: (event: tabris.WidgetSwipeEvent) => void;

  /**
   * Fired when a finger moves left quickly.
   */
  onSwipeLeft?: (event: tabris.WidgetSwipeEvent) => void;

  /**
   * Fired when a finger moves right quickly.
   */
  onSwipeRight?: (event: tabris.WidgetSwipeEvent) => void;

  /**
   * Fired when a finger moves up quickly.
   */
  onSwipeUp?: (event: tabris.WidgetSwipeEvent) => void;

  /**
   * Fired once when a finger briefly touched the widget.
   */
  onTap?: (event: tabris.WidgetTapEvent) => void;

  /**
   * Fired instead of touchEnd when the touch ends on another widget than it started on.
   */
  onTouchCancel?: (event: tabris.WidgetTouchEvent) => void;

  /**
   * Fired when a touch ends on the same widget than it started on.
   */
  onTouchEnd?: (event: tabris.WidgetTouchEvent) => void;

  /**
   * Fired repeatedly while swiping across the screen.
   */
  onTouchMove?: (event: tabris.WidgetTouchEvent) => void;

  /**
   * Fired when a widget is touched. See [Touch Events](../touch.md).
   */
  onTouchStart?: (event: tabris.WidgetTouchEvent) => void;

  /**
   * Fired when the [*background*](#background) property has changed.
   * @param value The new value of [*background*](#background).
   */
  onBackgroundChanged?: (event: tabris.PropertyChangedEvent<tabris.Widget, tabris.Color>) => void;

  /**
   * Fired when the [*backgroundImage*](#backgroundImage) property has changed.
   * @param value The new value of [*backgroundImage*](#backgroundImage).
   */
  onBackgroundImageChanged?: (event: tabris.PropertyChangedEvent<tabris.Widget, tabris.Image>) => void;

  /**
   * Fired when the [*baseline*](#baseline) property has changed.
   * @param value The new value of [*baseline*](#baseline).
   */
  onBaselineChanged?: (event: tabris.PropertyChangedEvent<tabris.Widget, tabris.Widget|Selector>) => void;

  /**
   * Fired when the [*bottom*](#bottom) property has changed.
   * @param value The new value of [*bottom*](#bottom).
   */
  onBottomChanged?: (event: tabris.PropertyChangedEvent<tabris.Widget, tabris.margin>) => void;

  /**
   * Fired when the [*bounds*](#bounds) property has changed.
   * @param value The new value of [*bounds*](#bounds).
   */
  onBoundsChanged?: (event: tabris.PropertyChangedEvent<tabris.Widget, tabris.Bounds>) => void;

  /**
   * Fired when the [*centerX*](#centerX) property has changed.
   * @param value The new value of [*centerX*](#centerX).
   */
  onCenterXChanged?: (event: tabris.PropertyChangedEvent<tabris.Widget, tabris.offset>) => void;

  /**
   * Fired when the [*centerY*](#centerY) property has changed.
   * @param value The new value of [*centerY*](#centerY).
   */
  onCenterYChanged?: (event: tabris.PropertyChangedEvent<tabris.Widget, tabris.offset>) => void;

  /**
   * Fired when the [*class*](#class) property has changed.
   * @param value The new value of [*class*](#class).
   */
  onClassChanged?: (event: tabris.PropertyChangedEvent<tabris.Widget, string>) => void;

  /**
   * Fired when the [*classList*](#classList) property has changed.
   * @param value The new value of [*classList*](#classList).
   */
  onClassListChanged?: (event: tabris.PropertyChangedEvent<tabris.Widget, string[]>) => void;

  /**
   * Fired when the [*cornerRadius*](#cornerRadius) property has changed.
   * @param value The new value of [*cornerRadius*](#cornerRadius).
   */
  onCornerRadiusChanged?: (event: tabris.PropertyChangedEvent<tabris.Widget, number>) => void;

  /**
   * Fired when the [*data*](#data) property has changed.
   * @param value The new value of [*data*](#data).
   */
  onDataChanged?: (event: tabris.PropertyChangedEvent<tabris.Widget, object>) => void;

  /**
   * Fired when the [*elevation*](#elevation) property has changed.
   * @param value The new value of [*elevation*](#elevation).
   */
  onElevationChanged?: (event: tabris.PropertyChangedEvent<tabris.Widget, number>) => void;

  /**
   * Fired when the [*enabled*](#enabled) property has changed.
   * @param value The new value of [*enabled*](#enabled).
   */
  onEnabledChanged?: (event: tabris.PropertyChangedEvent<tabris.Widget, boolean>) => void;

  /**
   * Fired when the [*font*](#font) property has changed.
   * @param value The new value of [*font*](#font).
   */
  onFontChanged?: (event: tabris.PropertyChangedEvent<tabris.Widget, tabris.Font>) => void;

  /**
   * Fired when the [*height*](#height) property has changed.
   * @param value The new value of [*height*](#height).
   */
  onHeightChanged?: (event: tabris.PropertyChangedEvent<tabris.Widget, tabris.dimension>) => void;

  /**
   * Fired when the [*highlightOnTouch*](#highlightOnTouch) property has changed.
   * @param value The new value of [*highlightOnTouch*](#highlightOnTouch).
   */
  onHighlightOnTouchChanged?: (event: tabris.PropertyChangedEvent<tabris.Widget, boolean>) => void;

  /**
   * Fired when the [*id*](#id) property has changed.
   * @param value The new value of [*id*](#id).
   */
  onIdChanged?: (event: tabris.PropertyChangedEvent<tabris.Widget, string>) => void;

  /**
   * Fired when the [*layoutData*](#layoutData) property has changed.
   * @param value The new value of [*layoutData*](#layoutData).
   */
  onLayoutDataChanged?: (event: tabris.PropertyChangedEvent<tabris.Widget, tabris.LayoutData>) => void;

  /**
   * Fired when the [*left*](#left) property has changed.
   * @param value The new value of [*left*](#left).
   */
  onLeftChanged?: (event: tabris.PropertyChangedEvent<tabris.Widget, tabris.margin>) => void;

  /**
   * Fired when the [*opacity*](#opacity) property has changed.
   * @param value The new value of [*opacity*](#opacity).
   */
  onOpacityChanged?: (event: tabris.PropertyChangedEvent<tabris.Widget, number>) => void;

  /**
   * Fired when the [*right*](#right) property has changed.
   * @param value The new value of [*right*](#right).
   */
  onRightChanged?: (event: tabris.PropertyChangedEvent<tabris.Widget, tabris.margin>) => void;

  /**
   * Fired when the [*top*](#top) property has changed.
   * @param value The new value of [*top*](#top).
   */
  onTopChanged?: (event: tabris.PropertyChangedEvent<tabris.Widget, tabris.margin>) => void;

  /**
   * Fired when the [*transform*](#transform) property has changed.
   * @param value The new value of [*transform*](#transform).
   */
  onTransformChanged?: (event: tabris.PropertyChangedEvent<tabris.Widget, tabris.Transformation>) => void;

  /**
   * Fired when the [*visible*](#visible) property has changed.
   * @param value The new value of [*visible*](#visible).
   */
  onVisibleChanged?: (event: tabris.PropertyChangedEvent<tabris.Widget, boolean>) => void;

  /**
   * Fired when the [*width*](#width) property has changed.
   * @param value The new value of [*width*](#width).
   */
  onWidthChanged?: (event: tabris.PropertyChangedEvent<tabris.Widget, tabris.dimension>) => void;

  /**
   * Fired when the [*win_theme*](#win_theme) property has changed.
   * @param value The new value of [*win_theme*](#win_theme).
   */
  onWin_themeChanged?: (event: tabris.PropertyChangedEvent<tabris.Widget, string>) => void;
}

export type ActionSheetProperties = tabris.ActionSheetProperties & ActionSheetEvents;

export type AlertDialogProperties = tabris.AlertDialogProperties & AlertDialogEvents;

export type AppProperties = tabris.AppProperties & AppEvents;


export type DateDialogProperties = tabris.DateDialogProperties & DateDialogEvents;

export type DeviceProperties = tabris.DeviceProperties & DeviceEvents;


export type FileSystemProperties = tabris.FileSystemProperties & FileSystemEvents;

export type InactivityTimerProperties = tabris.InactivityTimerProperties & InactivityTimerEvents;

export type NativeObjectProperties = tabris.NativeObjectProperties & NativeObjectEvents;

export type PopupProperties = tabris.PopupProperties & PopupEvents;

export type PrinterProperties = tabris.PrinterProperties & PrinterEvents;

export type TimeDialogProperties = tabris.TimeDialogProperties & TimeDialogEvents;

export type UIProperties = tabris.UIProperties & UIEvents;


export type ActionProperties = tabris.ActionProperties & ActionEvents;

export type ActivityIndicatorProperties = tabris.ActivityIndicatorProperties & ActivityIndicatorEvents;

export type ButtonProperties = tabris.ButtonProperties & ButtonEvents;

export type CanvasProperties = tabris.CanvasProperties & CanvasEvents;

export type CheckBoxProperties = tabris.CheckBoxProperties & CheckBoxEvents;

export type CollectionViewProperties = tabris.CollectionViewProperties & CollectionViewEvents;

export type CompositeProperties = tabris.CompositeProperties & CompositeEvents;

export type DrawerProperties = tabris.DrawerProperties & DrawerEvents;

export type ImageViewProperties = tabris.ImageViewProperties & ImageViewEvents;

export type NavigationBarProperties = tabris.NavigationBarProperties & NavigationBarEvents;

export type NavigationViewProperties = tabris.NavigationViewProperties & NavigationViewEvents;

export type PageProperties = tabris.PageProperties & PageEvents;

export type PickerProperties = tabris.PickerProperties & PickerEvents;

export type ProgressBarProperties = tabris.ProgressBarProperties & ProgressBarEvents;

export type RadioButtonProperties = tabris.RadioButtonProperties & RadioButtonEvents;

export type RefreshCompositeProperties = tabris.RefreshCompositeProperties & RefreshCompositeEvents;

export type ScrollViewProperties = tabris.ScrollViewProperties & ScrollViewEvents;

export type SearchActionProperties = tabris.SearchActionProperties & SearchActionEvents;

export type SliderProperties = tabris.SliderProperties & SliderEvents;

export type StatusBarProperties = tabris.StatusBarProperties & StatusBarEvents;

export type SwitchProperties = tabris.SwitchProperties & SwitchEvents;

export type TabProperties = tabris.TabProperties & TabEvents;

export type TabFolderProperties = tabris.TabFolderProperties & TabFolderEvents;

export type TextInputProperties = tabris.TextInputProperties & TextInputEvents;

export type TextViewProperties = tabris.TextViewProperties & TextViewEvents;

export type ToggleButtonProperties = tabris.ToggleButtonProperties & ToggleButtonEvents;

export type VideoProperties = tabris.VideoProperties & VideoEvents;

export type WebViewProperties = tabris.WebViewProperties & WebViewEvents;

export type WidgetProperties = tabris.WidgetProperties & WidgetEvents;


  interface IntrinsicElements {
    actionSheet: ActionSheetProperties;

    alertDialog: AlertDialogProperties;

    app: AppProperties;

    dateDialog: DateDialogProperties;

    device: DeviceProperties;

    fileSystem: FileSystemProperties;

    inactivityTimer: InactivityTimerProperties;

    nativeObject: NativeObjectProperties;

    popup: PopupProperties;

    printer: PrinterProperties;

    timeDialog: TimeDialogProperties;

    uI: UIProperties;

    action: ActionProperties;

    activityIndicator: ActivityIndicatorProperties;

    button: ButtonProperties;

    canvas: CanvasProperties;

    checkBox: CheckBoxProperties;

    collectionView: CollectionViewProperties;

    composite: CompositeProperties;

    drawer: DrawerProperties;

    imageView: ImageViewProperties;

    navigationBar: NavigationBarProperties;

    navigationView: NavigationViewProperties;

    page: PageProperties;

    picker: PickerProperties;

    progressBar: ProgressBarProperties;

    radioButton: RadioButtonProperties;

    refreshComposite: RefreshCompositeProperties;

    scrollView: ScrollViewProperties;

    searchAction: SearchActionProperties;

    slider: SliderProperties;

    statusBar: StatusBarProperties;

    switch: SwitchProperties;

    tab: TabProperties;

    tabFolder: TabFolderProperties;

    textInput: TextInputProperties;

    textView: TextViewProperties;

    toggleButton: ToggleButtonProperties;

    video: VideoProperties;

    webView: WebViewProperties;

    widget: WidgetProperties;

    widgetCollection: {}
  }
}