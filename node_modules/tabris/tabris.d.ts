
// Type definitions for Tabris.js 2.4.2
/// <reference path="globals.d.ts" />
/// <reference path="Jsx.d.ts" />

type TypeScriptPropertiesKey = 'tsProperties';

type Properties<T extends NativeObject, U extends keyof T = TypeScriptPropertiesKey> = T[U];

type Partial<T, U extends keyof T = keyof T> = {
  [P in U]?: T[P]
};

export as namespace tabris;

/**
 * Represents pixel data of a `Canvas` widget.
 */
interface ImageData {

  /**
   * A one-dimensional array containing the data in the RGBA order, with integer values between 0 and 255 (included).
   */
  readonly data: Uint8ClampedArray;

  /**
   * The actual height of the ImageData, in pixels.
   */
  readonly width: number;

  /**
   * The actual height of the ImageData, in pixels.
   */
  readonly height: number;

}

type Image = string | {

  /**
   * Image path or URL.
   */
  src: string;

  /**
   * Image width, extracted from the image file when missing.
   */
  width?: number;

  /**
   * Image height, extracted from the image file when missing.
   */
  height?: number;

  /**
   * Image scale factor - the image will be scaled down by this factor.
   * Ignored when width or height are set.
   */
  scale?: number;
}

/**
 * Colors are specified as strings using one of the following formats:
 *
 * - **"#xxxxxx"**
 * - **"#xxx"**
 * - **"#xxxxxxxx"**
 * - **"#xxxx"**
 * - **"rgb(r, g, b)"** with **r**, **g** and **b** being numbers in the range 0..255.
 * - **"rgba(r, g, b, a)"** with **a** being a number in the range 0..1.
 * - a color name from the CSS3 specification.
 * - **"transparent"** sets a fully transparent color. This is a shortcut for **"rgba(0, 0, 0, 0)"**.
 * - **"initial"** resets the color to its (platform-dependent) default.
 */
type Color = string;

/**
 * Fonts are specified as strings using the shorthand syntax known from CSS, specifically **"[font-style] [font-weight] font-size [font-family[, font-family]*]"**. The font family may be omitted, in this case the default system font will be used. Generic font families supported across all platforms are **"serif"**, **"sans-serif"**, **"condensed"** and **"monospace"**. Supported font weights are **"light"**, **"thin"**, **"normal"**, **"medium"**, **"bold"** and **"black"**. The value **"initial"** represents the platform default.
 */
type Font = string;

/**
 * Defines how the widget should be arranged. When setting the layout of a widget using **LayoutData**, all currently set layout attributes not in the new LayoutData object will be implicitly reset to null (i.e. "not specified").
 */
interface LayoutData {
    left?: margin;
    right?: margin;
    top?: margin;
    bottom?: margin;
    centerX?: offset;
    centerY?: offset;
    baseline?: Widget | Selector;
    width?: dimension;
    height?: dimension;
}

/**
 * A Widget's bounds
 */
interface Bounds {

  /**
   * the horizontal offset from the parent's left edge in dip
   */
  left: number;

  /**
   * the vertical offset from the parent's top edge in dip
   */
  top: number;

  /**
   * the width of the widget in dip
   */
  width: number;

  /**
   * the height of the widget in dip
   */
  height: number;

}

interface Transformation {

  /**
   * Clock-wise rotation in radians. Defaults to \`0\`.
   */
   rotation?: number;

  /**
   * Horizontal scale factor. Defaults to \`1\`.
   */
  scaleX?: number;

  /**
   * Vertical scale factor. Defaults to \`1\`.
   */
  scaleY?: number;

  /**
   * Horizontal translation (shift) in dip. Defaults to \`0\`.
   */
  translationX?: number;

  /**
   * Vertical translation (shift) in dip. Defaults to \`0\`.
   */
  translationY?: number;

  /**
   * Z-axis translation (shift) in dip. Defaults to \`0\`. Android 5.0+ only.
   */
  translationZ?: number;

}

/**
 * An expression or a predicate function to select a set of widgets.
 */
type Selector = string | SelectorFunction;
type SelectorFunction = (widget: Widget) => boolean;

/**
 * A positive float, or 0, representing device independent pixels.
 */
type dimension = number;
/**
 * A positive or negative float, or 0, representing device independent pixels.
 */
type offset = number;

/**
 * Distance to a parent's or sibling's opposing edge in one of these formats:
 * - **offset** the distance from the parent's opposing edge in device independent pixels
 * - **percentage** the distance from the parent's opposing edge in percent of the parent's width
 * - **Widget** attach this edge to the given siblings's opposing edge
 * - **"selector"**
 * - **"prev()"** Same as above, but as space-separated string list instead of array
 * - **"selector offset"**
 * - **"prev() offset"**
 * - **[Widget, offset]** the distance from the given widget's opposing edge in pixel
 * - **"Widget, offset"**Same as above, but as space-separated string list instead of array.
 * - **[percentage, offset]** the distance from the parent's opposing edge in percent of the parent's width plus a fixed offset in pixels
 * - **"percentage offset"** Same as above, but as space-separated string list instead of array
 * - **[selector, offset]**
 * - **["prev()", offset]**
 */
type margin = any;

interface AnimationOptions {

  /**
   * Time until the animation starts in ms, defaults to 0.
   */
  delay?: number;

  /**
   * Duration of the animation in ms.
   */
  duration?: number;

  /**
   *  Easing function applied to the animation.
   */
  easing?: "linear"|"ease-in"|"ease-out"|"ease-in-out";

  /**
   *  Number of times to repeat the animation, defaults to 0.
   */
  repeat?: number;

  /**
   *  If true, alternates the direction of the animation on every repeat.
   */
  reverse?: boolean;

  /**
   * no effect, but will be given in animation events.
   */
  name?: string;
}

/**
 * Represents dimensions on four edges of a box, as used for padding.
 */
interface BoxDimensions {

  /**
   * The left part, in dip.
   */
  left?: number;

  /**
   * The right part, in dip.
   */
  right?: number;

  /**
   * The top part, in dip.
   */
  top?: number;

  /**
   * The bottom part, in dip.
   */
  bottom?: number;

}

interface PropertyChangedEvent<T,U> extends EventObject<T>{
  readonly value: U
}

// ActionSheet

interface _ActionSheetProperties extends _PopupProperties {

  /**
   * An array of objects describing the actions to be displayed. Each action must have a title and it can
   * also have an image. Actions with the style `cancel` or `destructive` are displayed in a special way.
   */
  actions: {title: string, image?: Image, style?: 'default'|'cancel'|'destructive'}[];

  /**
   * A descriptive message for the available actions.
   */
  message: string;

  /**
   * The title of the action sheet.
   */
  title: string;
}
type ActionSheetProperties = Partial<_ActionSheetProperties>

interface ActionSheetEvents extends PopupEvents {

  /**
   * Fired when the action sheet was closed.
   */
  close?: (event: EventObject<ActionSheet>) => void;

  /**
   * Fired when an action was selected.
   */
  select?: (event: ActionSheetSelectEvent) => void;

  /**
   * Fired when the [*actions*](#actions) property has changed.
   * @param value The new value of [*actions*](#actions).
   */
  actionsChanged?: (event: PropertyChangedEvent<ActionSheet, {title: string, image?: Image, style?: 'default'|'cancel'|'destructive'}[]>) => void;

  /**
   * Fired when the [*message*](#message) property has changed.
   * @param value The new value of [*message*](#message).
   */
  messageChanged?: (event: PropertyChangedEvent<ActionSheet, string>) => void;

  /**
   * Fired when the [*title*](#title) property has changed.
   * @param value The new value of [*title*](#title).
   */
  titleChanged?: (event: PropertyChangedEvent<ActionSheet, string>) => void;
}


interface ActionSheetSelectEvent extends EventObject<ActionSheet> {
  readonly index: number;
}

/**
 * A pop up dialog that offers a selection. Is automatically disposed when closed.
 */
interface ActionSheet extends _ActionSheetProperties {}
 export class ActionSheet extends Popup {


  /**
   * The type of this property defines the interface used by `set`, `get`, and
   * the `Properties` interface. It's value is always undefined.
   */
  public readonly tsProperties: ActionSheetProperties;

  public constructor(properties?: Properties<ActionSheet>);

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: ActionSheetEvents): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: ActionSheetEvents): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: ActionSheetEvents): this;
}

// AlertDialog

interface _AlertDialogProperties extends _PopupProperties {

  /**
   * An object with the texts of the buttons to display. There are up to three buttons: `ok`, `cancel` and
   * `neutral`. If no text is given for a button it will not be displayed. Example: `{ok: 'Yes', cancel:
   * 'No'}` shows 'Yes' and 'No', but no 'neutral' button.
   */
  buttons: {ok?: string, cancel?: string, neutral?: string};

  /**
   * The message to display inside the dialog.
   */
  message: string;

  /**
   * The title of the dialog.
   */
  title: string;
}
type AlertDialogProperties = Partial<_AlertDialogProperties>

interface AlertDialogEvents extends PopupEvents {

  /**
   * Fired when the dialog was closed for any reason.
   */
  close?: (event: AlertDialogCloseEvent) => void;

  /**
   * Fired when the dialog was closed by pressing the 'cancel' button.
   */
  closeCancel?: (event: EventObject<AlertDialog>) => void;

  /**
   * Fired when the dialog was closed by pressing the 'neutral' button.
   */
  closeNeutral?: (event: EventObject<AlertDialog>) => void;

  /**
   * Fired when the dialog was closed by pressing the 'ok' button.
   */
  closeOk?: (event: EventObject<AlertDialog>) => void;

  /**
   * Fired when the [*buttons*](#buttons) property has changed.
   * @param value The new value of [*buttons*](#buttons).
   */
  buttonsChanged?: (event: PropertyChangedEvent<AlertDialog, {ok?: string, cancel?: string, neutral?: string}>) => void;

  /**
   * Fired when the [*message*](#message) property has changed.
   * @param value The new value of [*message*](#message).
   */
  messageChanged?: (event: PropertyChangedEvent<AlertDialog, string>) => void;

  /**
   * Fired when the [*title*](#title) property has changed.
   * @param value The new value of [*title*](#title).
   */
  titleChanged?: (event: PropertyChangedEvent<AlertDialog, string>) => void;
}


interface AlertDialogCloseEvent extends EventObject<AlertDialog> {
  readonly button: 'ok'|'cancel'|'neutral'|'';
}

/**
 * An `AlertDialog` represents a native dialog pop-up showing a message and up to three buttons.  Is
 * automatically disposed when closed.
 */
interface AlertDialog extends _AlertDialogProperties {}
 export class AlertDialog extends Popup {


  /**
   * The type of this property defines the interface used by `set`, `get`, and
   * the `Properties` interface. It's value is always undefined.
   */
  public readonly tsProperties: AlertDialogProperties;

  public constructor(properties?: Properties<AlertDialog>);

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: AlertDialogEvents): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: AlertDialogEvents): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: AlertDialogEvents): this;
}

// App

interface _AppProperties extends _NativeObjectProperties {

  /**
   * Enables certificate pinning for HTTP requests. When pinned certificates are defined for a host,
   * connections to this host will only be permitted if the server provides a matching certificate.
   * Connections to hosts that are not in the list are not affected.
   * Certificate pinning affects the following components: XHR/fetch, WebSockets, image loading and app
   * patching. It does *not* affect WebViews.
   * The list of pinned certificates has to be in the form of `[{host: <string>, hash: <string>,
   * algorithm: <RSA2048|RSA4096|ECDSA256>}, ..]`.
   * - The `host` attribute denotes the host name (including subdomain) of the host to be pinned
   * ([wildcards allowed](https://en.wikipedia.org/wiki/Wildcard_DNS_record)).
   * - The `hash` attribute is the base64 encoded sha256 fingerprint of the _subjectPublicKeyInfo_,
   * prefixed with `sha256/`.
   * - The `algorithm` attribute denotes the public key algorithm of the SSL certificate and can have the
   * values `RSA2048`, `RSA4096` or `ECDSA256`. This attribute is only required on iOS.
   * Example: `[{host: 'freegeoip.net', hash: 'sha256/+SVYjThgePRQxQ0e8bWTQDRtPYR/xBRufqyMoeaWteo=',
   * algorithm: 'ECDSA256'}]`
   * For further details see https://www.owasp.org/index.php/Certificate_and_Public_Key_Pinning.
   */
  pinnedCertificates: any[];
}
type AppProperties = Partial<_AppProperties>

interface AppEvents extends NativeObjectEvents {

  /**
   * Fired when the back button is pressed on Android.
   */
  backNavigation?: (event: AppBackNavigationEvent) => void;

  /**
   * Fired when the app becomes invisible. Either because another app is in the foreground or the user has
   * returned to the home screen.
   */
  background?: (event: EventObject<App>) => void;

  /**
   * The event is fired when the app starts or when it returns from the background.
   */
  foreground?: (event: EventObject<App>) => void;

  /**
   * Fired when the app is not the interaction target of the user anymore. Usually preceded by `resume`.
   */
  pause?: (event: EventObject<App>) => void;

  /**
   * Fired when the app is visible and ready to interact with the user. The event is preceded by either
   * `foreground` (the app becomes visible again) or `pause` (the app regains ability to interact with
   * user).
   */
  resume?: (event: EventObject<App>) => void;

  /**
   * Fired when the app is being destroyed. After this callback no more interaction with the app is
   * possible.
   */
  terminate?: (event: EventObject<App>) => void;

  /**
   * Fired when the [*id*](#id) property has changed.
   * @param value The new value of [*id*](#id).
   */
  idChanged?: (event: PropertyChangedEvent<App, string>) => void;

  /**
   * Fired when the [*pinnedCertificates*](#pinnedCertificates) property has changed.
   * @param value The new value of [*pinnedCertificates*](#pinnedCertificates).
   */
  pinnedCertificatesChanged?: (event: PropertyChangedEvent<App, any[]>) => void;

  /**
   * Fired when the [*version*](#version) property has changed.
   * @param value The new value of [*version*](#version).
   */
  versionChanged?: (event: PropertyChangedEvent<App, string>) => void;

  /**
   * Fired when the [*versionCode*](#versionCode) property has changed.
   * @param value The new value of [*versionCode*](#versionCode).
   */
  versionCodeChanged?: (event: PropertyChangedEvent<App, number>) => void;
}


interface AppBackNavigationEvent extends EventObject<App> {
  readonly preventDefault: () => void;
}

/**
 * Provides information about the application.
 */
interface App extends _AppProperties {}
 export class App extends NativeObject {


  /**
   * The type of this property defines the interface used by `set`, `get`, and
   * the `Properties` interface. It's value is always undefined.
   */
  public readonly tsProperties: AppProperties;

  private constructor();

  /**
   * Shuts down the running application and closes the UI.
   */
  close(): void;

  /**
   * Returns the URL for a given resource that is bundled with the app. Can be used to access app
   * resources like images, videos, etc. Note that these resources can only be accessed in read-only mode.
   * @param path The path of a resource relative to the application root.
   */
  getResourceLocation(path: string): string;

  /**
   * Installs a patch from the given URL. When the patch is successfully installed, it will remain
   * inactive until the application is reloaded. Not supported on Windows. For more information see
   * [Patching a Tabris.js App](../patch.md)
   * @param url The URL to fetch a patch from.
   * @param callback A callback function to be called when the installation has finished or failed. In case of a failure, the callback will receive a parameter `error` that contains an Error object. If the installation succeeds, this parameter will be `null` and a second parameter will contain the parsed content of the file `patch.json` from the installed patch.
   * @provisional
   */
  installPatch(url: string, callback: (error: Error|null, patch: any|null) => void): void;

  /**
   * Asks the operating system to open the given URL in an external app. Operating systems usually support
   * a variety of URL schemes including `http`, `https`, `mailto`, `tel`, and `sms`. Apps can also
   * register for custom URL schemes.
   * @param url The URL to launch.
   */
  launch(url: string): Promise<void>;

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: AppEvents): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: AppEvents): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: AppEvents): this;

  /**
   * Allows to register a font to use throughout the app. Once a font is registered its alias can be used
   * to apply the font where ever a font can be configured, e.g. in `TextView` or `GraphicalContext`.
   * Tabris.js currently supports TrueType fonts (*.ttf) and OpenType fonts (*.otf).
   * @param alias An identifier for the registered font. The alias can be used in places where a font can be configures, e.g.: `TextView` or `GraphicalContext`
   * @param file The font file to register for later use. Similar to images paths, the file path can be absolute, relative or an URL.

  On the Windows platform it is required to provide the font-family name to reference the font in the given file. The font-family name is provided as a fragment postfix to the file name. For example `arial.ttf#Arial` can be used the load a font named 'Arial' from the file 'arial.ttf'. The file also has to be bundled with the app to work, loading it remotely (e.g. via the developer app) will not work.
   */
  registerFont(alias: string, file: string): void;

  /**
   * Forces the running application to reload the main module and start over.
   */
  reload(): void;

  /**
   * Uniquely identifies the app.
   */
  readonly id: string;

  /**
   * The user facing version number, e.g. '2.1-beta3'.
   */
  readonly version: string;

  /**
   * An alternative version number used in app stores to identify different versions of an app. Usually
   * incremented with each release. This property reflects the `versionCode` on Android and
   * `CFBundleVersion` on iOS.
   */
  readonly versionCode: number;
}

declare let app: App;

// CanvasContext

/**
 * The CanvasContext is used for drawing onto the [canvas](./Canvas.md). It is a subset of the HTML5
 * [CanvasRenderingContext2D](https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D).
 */
 export class CanvasContext {

  private constructor();

  /**
   * Adds an arc to the path which is centered at *(x, y)* position with radius *r* starting at
   * *startAngle* and ending at *endAngle* going in the given direction by *anticlockwise* (defaulting to
   * clockwise).
   * @param x The x coordinate of the arc's center.
   * @param y The y coordinate of the arc's center.
   * @param radius The arc's radius.
   * @param startAngle The angle in radians at which the arc starts, measured clockwise from the positive x axis.
   * @param endAngle The angle in radians at which the arc ends, measured clockwise from the positive x axis.
   * @param anticlockwise if true, causes the arc to be drawn counter-clockwise between the two angles.
   */
  arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, anticlockwise?: boolean): void;

  /**
   * Starts a new path by emptying the list of sub-paths.
   */
  beginPath(): void;

  /**
   * Adds a cubic Bézier curve to the path. The starting point is the last point in the current path.
   * @param cp1x The x axis of the coordinate for the first control point.
   * @param cp1y The y axis of the coordinate for the first control point.
   * @param cp2x The x axis of the coordinate for the second control point.
   * @param cp2y The y axis of the coordinate for the second control point.
   * @param x The x axis of the coordinate for the end point.
   * @param y The y axis of the coordinate for the end point.
   */
  bezierCurveTo(cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number): void;

  /**
   * Sets all pixels in the rectangle defined by starting point *(x, y)* and size *(width, height)* to
   * transparent, erasing any previously drawn content.
   * @param x The x axis of the rectangle's upper-left corner.
   * @param y The y axis of the rectangle's upper-left corner.
   * @param width The rectangle's width.
   * @param height The rectangles height.
   */
  clearRect(x: number, y: number, width: number, height: number): void;

  /**
   * Adds a straight line from the current point to the start of the current sub-path.
   */
  closePath(): void;

  /**
   * creates a new, blank ImageData object with the specified dimensions. All of the pixels in the new
   * object are transparent black.
   * @param width The width of the new ImageData object.
   * @param height The height of the new ImageData object.
   */
  createImageData(width: number, height: number): ImageData;

  /**
   * creates a new, blank ImageData object with the same dimensions as the specified existing ImageData
   * object. All of the pixels in the new object are transparent black.
   * @param imageData An existing ImageData object from which to copy the width and height.
   */
  createImageData(imageData: ImageData): ImageData;

  /**
   * Fills the current or path with the current fill style.
   */
  fill(): void;

  /**
   * draws a filled rectangle at *(x, y)* position whose size is determined by *width* and *height*. and
   * whose color is determined by the fillStyle attribute.
   * @param x The x axis of the rectangle's upper-left corner.
   * @param y The y axis of the rectangle's upper-left corner.
   * @param width The rectangle's width.
   * @param height The rectangles height.
   */
  fillRect(x: number, y: number, width: number, height: number): void;

  /**
   * Fills a given text at the given *(x, y)* position using the current *textAlign* and *textBaseline*
   * values.
   * @param text The text to render.
   * @param x The x axis of the coordinate for the text starting point.
   * @param y The y axis of the coordinate for the text starting point.
   */
  fillText(text: string, x: number, y: number): void;

  /**
   * Returns an ImageData object representing the underlying pixel data for the area of the canvas denoted
   * by the given rectangle.
   * @param x The x axis of the rectangle's upper-left corner.
   * @param y The y axis of the rectangle's upper-left corner.
   * @param width The rectangle's width.
   * @param height The rectangle's height.
   */
  getImageData(x: number, y: number, width: number, height: number): ImageData;

  /**
   * Connects the last point in the sub-path to the *(x, y)* coordinates with a straight line.
   * @param x The x axis of the coordinate for the end of the line.
   * @param y The y axis of the coordinate for the end of the line.
   */
  lineTo(x: number, y: number): void;

  /**
   * Moves the starting point of a new sub-path to the *(x, y)* coordinates.
   * @param x The x axis of the point.
   * @param y The y axis of the point.
   */
  moveTo(x: number, y: number): void;

  /**
   * Paints data from the given ImageData object onto the bitmap at coordinates (x, y).
   * @param imageData An ImageData object containing the array of pixel values.
   * @param x x-coordinate of the upper-left corner of the image data rectangle
   * @param y y-coordinate of the upper-left corner of the image data rectangle
   */
  putImageData(imageData: ImageData, x: number, y: number): void;

  /**
   * Adds a quadratic Bézier curve to the path. The starting point is the last point in the current path.
   * @param cpx The x axis of the coordinate for the control point.
   * @param cpy The y axis of the coordinate for the control point.
   * @param x The x axis of the coordinate for the end point.
   * @param y The y axis of the coordinate for the end point.
   */
  quadraticCurveTo(cpx: number, cpy: number, x: number, y: number): void;

  /**
   * Creates a path for a rectangle with the top-left corner at *(x, y)*
   * @param x The x axis of the rectangle's upper-left corner.
   * @param y The y axis of the rectangle's upper-left corner.
   * @param width The rectangle's width.
   * @param height The rectangles height.
   */
  rect(x: number, y: number, width: number, height: number): void;

  /**
   * Restores the most recently saved canvas state by popping the top entry in the drawing state stack.
   */
  restore(): void;

  /**
   * Adds a rotation to the transformation matrix.
   * @param angle  The angle to rotate clockwise in radians.
   */
  rotate(angle: number): void;

  /**
   * Saves the entire state of the canvas by pushing the current state onto a stack.
   */
  save(): void;

  /**
   * Adds a scaling transformation to the canvas units by x horizontally and by y vertically.
   * @param x Scaling factor in the horizontal direction.
   * @param y Scaling factor in the vertical direction.
   */
  scale(x: number, y: number): void;

  /**
   * resets (overrides) the current transformation to the identity matrix and then invokes a
   * transformation described by the arguments of this method. The matrix has the following format:
   * [[a, c, e],
   * [b, d, f],
   * [0, 0, 1]]
   * @param a Horizontal scaling.
   * @param b Horizontal skewing.
   * @param c Vertical skewing.
   * @param d Vertical scaling.
   * @param e Horizontal moving.
   * @param f Vertical moving.
   */
  setTransform(a: number, b: number, c: number, d: number, e: number, f: number): void;

  /**
   * Strokes the current path with the current stroke style.
   */
  stroke(): void;

  /**
   * draws the outline of a rectangle at *(x, y)* position whose size is determined by *width* and
   * *height* using the current stroke style.
   * @param x The x axis of the rectangle's upper-left corner.
   * @param y The y axis of the rectangle's upper-left corner.
   * @param width The rectangle's width.
   * @param height The rectangles height.
   */
  strokeRect(x: number, y: number, width: number, height: number): void;

  /**
   * Strokes a given text at the given *(x, y)* position using the current *textAlign* and *textBaseline*
   * values.
   * @param text The text to render.
   * @param x The x axis of the coordinate for the text starting point.
   * @param y The y axis of the coordinate for the text starting point.
   */
  strokeText(text: string, x: number, y: number): void;

  /**
   * Multiplies the current transformation with the matrix described by the arguments of this method. The
   * matrix has the following format:
   * [[a, c, e],
   * [b, d, f],
   * [0, 0, 1]]
   * @param a Horizontal scaling.
   * @param b Horizontal skewing.
   * @param c Vertical skewing.
   * @param d Vertical scaling.
   * @param e Horizontal moving.
   * @param f Vertical moving.
   */
  transform(a: number, b: number, c: number, d: number, e: number, f: number): void;

  /**
   * Adds a translation transformation by moving the canvas and its origin *x* horizontally and *y*
   * vertically on the grid.
   * @param x The distance to move in the horizontal direction.
   * @param y The distance to move in the vertical direction.
   */
  translate(x: number, y: number): void;

  /**
   * Specifies the color to use inside shapes.
   */
  fillStyle: Color;

  /**
   * Specifies the current text style being used when drawing text.
   */
  font: Font;

  /**
   * Determines how the end points of every line are drawn.
   */
  lineCap: "butt" | "round" | "square";

  /**
   * Determines how two connecting segments in a shape are joined together.
   */
  lineJoin: "bevel" | "miter" | "round";

  /**
   * The thickness of lines in space units.
   */
  lineWidth: number;

  /**
   * Specifies the color to use for the lines around shapes.
   */
  strokeStyle: Color;

  /**
   * Specifies the current text alignment being used when drawing text.
   */
  textAlign: "center" | "end" | "left" | "right" | "start";

  /**
   * Specifies the current text baseline being used when drawing text.
   */
  textBaseline: "alphabetic" | "bottom" | "hanging" | "ideographic" | "middle" | "top";
}

// DateDialog

interface _DateDialogProperties extends _PopupProperties {

  /**
   * The date to be displayed in the dialog. The current date is used when no date is provided.
   */
  date: Date;

  /**
   * Limits the selectable date range to the given future date. No limit is applied when not set.
   */
  maxDate: Date;

  /**
   * Limits the selectable date range to the given past date. No limit is applied when not set.
   */
  minDate: Date;
}
type DateDialogProperties = Partial<_DateDialogProperties>

interface DateDialogEvents extends PopupEvents {

  /**
   * Fired when the date dialog was closed.
   */
  close?: (event: DateDialogCloseEvent) => void;

  /**
   * Fired when a date was selected by the user.
   */
  select?: (event: DateDialogSelectEvent) => void;

  /**
   * Fired when the [*date*](#date) property has changed.
   * @param value The new value of [*date*](#date).
   */
  dateChanged?: (event: PropertyChangedEvent<DateDialog, Date>) => void;

  /**
   * Fired when the [*maxDate*](#maxDate) property has changed.
   * @param value The new value of [*maxDate*](#maxDate).
   */
  maxDateChanged?: (event: PropertyChangedEvent<DateDialog, Date>) => void;

  /**
   * Fired when the [*minDate*](#minDate) property has changed.
   * @param value The new value of [*minDate*](#minDate).
   */
  minDateChanged?: (event: PropertyChangedEvent<DateDialog, Date>) => void;
}


interface DateDialogCloseEvent extends EventObject<DateDialog> {
  readonly date: Date;
}

interface DateDialogSelectEvent extends EventObject<DateDialog> {
  readonly date: Date;
}

/**
 * A `DateDialog` represents a native dialog pop-up allowing the user to pick a date. Properties can
 * only be set before open() is called. The dialog is automatically disposed when closed.
 */
interface DateDialog extends _DateDialogProperties {}
 export class DateDialog extends Popup {


  /**
   * The type of this property defines the interface used by `set`, `get`, and
   * the `Properties` interface. It's value is always undefined.
   */
  public readonly tsProperties: DateDialogProperties;

  public constructor(properties?: Properties<DateDialog>);

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: DateDialogEvents): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: DateDialogEvents): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: DateDialogEvents): this;
}

// Device

interface _DeviceProperties extends _NativeObjectProperties {

  /**
   * The name of the platform. Currently either `"Android"`, `"iOS"`, or `"windows"`. This property is
   * also available globally as `device.platform`.
   * @static
   */
  platform: "Android" | "iOS" | "windows";
}
type DeviceProperties = Partial<_DeviceProperties>

interface DeviceEvents extends NativeObjectEvents {

  /**
   * Fired when the `orientation` property has changed and the rotation animation has finished.
   * @param value The new value of [*orientation*](#orientation).
   */
  orientationChanged?: (event: PropertyChangedEvent<Device, string>) => void;

  /**
   * Fired when the [*win_keyboardPresent*](#win_keyboardPresent) property has changed.
   * @param value The new value of [*win_keyboardPresent*](#win_keyboardPresent).
   */
  win_keyboardPresentChanged?: (event: PropertyChangedEvent<Device, boolean>) => void;

  /**
   * Fired when the [*win_primaryInput*](#win_primaryInput) property has changed.
   * @param value The new value of [*win_primaryInput*](#win_primaryInput).
   */
  win_primaryInputChanged?: (event: PropertyChangedEvent<Device, boolean>) => void;
}


/**
 * Provides information about the device that executes the application.
 */
interface Device extends _DeviceProperties {}
 export class Device extends NativeObject {


  /**
   * The type of this property defines the interface used by `set`, `get`, and
   * the `Properties` interface. It's value is always undefined.
   */
  public readonly tsProperties: DeviceProperties;

  private constructor();

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: DeviceEvents): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: DeviceEvents): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: DeviceEvents): this;

  /**
   * The user language configured on the device as an [RFC 4646](http://tools.ietf.org/html/rfc4646)
   * compliant string. For example `"de"`, `"es-ES"`, etc. This property is also available globally as
   * `navigator.language`.
   * @static
   */
  readonly language: string;

  /**
   * The name of the device model. For example `"iPad4,1"` or `"Nexus 7"`. This property is also available
   * globally as `device.model`.
   * @static
   */
  readonly model: string;

  /**
   * The device orientation. One of `portrait-primary`, `portrait-secondary`, `landscape-primary`, and
   * `landscape-secondary`.
   */
  readonly orientation: "landscape-primary" | "landscape-secondary" | "portrait-primary" | "portrait-secondary";

  /**
   * The ratio between physical pixels and device independent pixels. This property is also available
   * globally as
   * [`window.devicePixelRatio`](https://developer.mozilla.org/en-US/docs/Web/API/Window.devicePixelRatio).
   * @static
   */
  readonly scaleFactor: number;

  /**
   * The entire height of the device's screen in device independent pixel. Depends on the current device
   * orientation. This property is also available globally as
   * [screen.height](https://developer.mozilla.org/en-US/docs/Web/API/Screen.height).
   * @static
   */
  readonly screenHeight: number;

  /**
   * The entire width of the device's screen in device independent pixel. Depends on the current device
   * orientation. This property is also available as globally as
   * [screen.width](https://developer.mozilla.org/en-US/docs/Web/API/Screen.width).
   * @static
   */
  readonly screenWidth: number;

  /**
   * The name of the device manufacture. For example `"Samsung"` or `"Apple"`. This property is also
   * available globally as `device.vendor`.
   * @static
   */
  readonly vendor: string;

  /**
   * The platform version. On iOS it looks like this: `"8.1.1"`. On Android, the [version
   * code](https://developer.android.com/reference/android/os/Build.VERSION_CODES.html) is returned. This
   * property is also available globally as `device.version`.
   * @static
   */
  readonly version: string;

  /**
   * Returns `true` if a hardware keyboard is present. The developer may choose to handle some user input
   * differently in that case. Available only on windows.
   */
  readonly win_keyboardPresent: boolean;

  /**
   * On a PC this returns `"touch"` when in tablet mode, otherwise `"mouse"`. On phones this this returns
   * `"mouse"` when displayed on an external display ("Continuum"), otherwise `"touch"`. Available only on
   * windows
   */
  readonly win_primaryInput: "mouse" | "touch";
}

declare let device: Device;

// EventObject

/**
 * Base class for all events fired by the framework. Instances may include additional properties, which
 * are documented together with the event type. Change events also have a `value` property. 
 * When the trigger method is called with a new instance of `EventObject`, `type`, `target` and
 * `timeStamp` are initialized automatically.
 * In TypeScript this is a generic class, with the parameter `T` defining the type of the `target`
 * property.
 */
 export class EventObject<T> {

  public constructor();

  /**
   * The object that fired the event.
   */
  readonly target: T;

  /**
   * The time at which the event was created, in milliseconds.
   */
  readonly timeStamp: number;

  /**
   * The event type.
   */
  readonly type: string;
}

// FileSystem

interface _FileSystemProperties extends _NativeObjectProperties {
}
type FileSystemProperties = Partial<_FileSystemProperties>

interface FileSystemEvents extends NativeObjectEvents {
}


/**
 * The `fs` object provides methods to read and write files. All methods are asynchronous and return a
 * promise.
 */
interface FileSystem extends _FileSystemProperties {}
 export class FileSystem extends NativeObject {


  /**
   * The type of this property defines the interface used by `set`, `get`, and
   * the `Properties` interface. It's value is always undefined.
   */
  public readonly tsProperties: FileSystemProperties;

  private constructor();

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: FileSystemEvents): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: FileSystemEvents): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: FileSystemEvents): this;

  /**
   * Reads the contents of a given directory. Returns a promise that resolves on success to an array of
   * the names of the files in the directory excluding '.' and '..'. In case of failure, the Promise
   * rejects with an Error.
   * @param path The path of the directory to read.
   */
  readDir(path: string): Promise<string[]>;

  /**
   * Reads the given file and returns a promise that resolves to the contents of the file on success and
   * rejects with an Error in case of a failure. The file contents are returned as an ArrayBuffer.
   * @param path The path of the file to read.
   */
  readFile(path: string): Promise<ArrayBuffer>;

  /**
   * Reads the given text file and returns a promise that resolves to the contents of the file on success
   * and rejects with an Error in case of a failure. The file contents are returned as a string.
   * @param path The path of the file to read.
   * @param encoding The encoding to use to read text files.
   */
  readFile(path: string, encoding: string): Promise<string>;

  /**
   * Removes the given file. Returns a promise that resolves on success and rejects with an Error in case
   * of a failure.
   * @param path The path of the file to remove.
   */
  removeFile(path: string): Promise<void>;

  /**
   * Writes the given binary contents to the given file. If the file exists, it is overwritten, otherwise
   * it is created. Returns a promise that resolves on success and rejects with an Error in case of a
   * failure.
   * @param path The path of the file to write.
   * @param data The contents to write to the file.
   */
  writeFile(path: string, data: ArrayBuffer): Promise<void>;

  /**
   * Writes the given text to the given file using the given encoding or `utf-8` if no encoding is
   * specified. If the file exists, it is overwritten, otherwise it is created. Returns a promise that
   * resolves on success and rejects with an Error in case of a failure.
   * @param path The path of the file to write.
   * @param text The text to write to the file.
   * @param encoding The encoding to use to write a text file. When omitted, `utf-8` will be used.
   */
  writeFile(path: string, text: string, encoding?: string): Promise<void>;

  /**
   * The path of a directory that the app may use to store cached files. The OS may delete files in this
   * directory when the device runs low on storage. Only use this location for data that can easily be
   * re-created.
   * @static
   */
  readonly cacheDir: string;

  /**
   * The path of a directory that the app may use to store persistent files.
   * @static
   */
  readonly filesDir: string;
}

declare let fs: FileSystem;

// InactivityTimer

interface _InactivityTimerProperties extends _NativeObjectProperties {

  /**
   * The interval of user inactivity that will trigger the timer. Given in milliseconds. Changes to this
   * property will not affect a running timer.
   */
  delay: number;
}
type InactivityTimerProperties = Partial<_InactivityTimerProperties>

interface InactivityTimerEvents extends NativeObjectEvents {

  /**
   * Fired when the app has not been interacted with since the configured delay.
   */
  timeout?: (event: EventObject<InactivityTimer>) => void;

  /**
   * Fired when the [*delay*](#delay) property has changed.
   * @param value The new value of [*delay*](#delay).
   */
  delayChanged?: (event: PropertyChangedEvent<InactivityTimer, number>) => void;
}


/**
 * A timer that triggers when the app has not been interacted with for a configurable interval.
 */
interface InactivityTimer extends _InactivityTimerProperties {}
 export class InactivityTimer extends NativeObject {


  /**
   * The type of this property defines the interface used by `set`, `get`, and
   * the `Properties` interface. It's value is always undefined.
   */
  public readonly tsProperties: InactivityTimerProperties;

  public constructor(properties?: Properties<InactivityTimer>);

  /**
   * Stops and resets the timer.
   */
  cancel(): void;

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: InactivityTimerEvents): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: InactivityTimerEvents): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: InactivityTimerEvents): this;

  /**
   * Starts the timer with the currently configured delay. After the first `timeout` event, the timer will
   * stop but it can be started again.
   */
  start(): void;
}

// NativeObject

interface _NativeObjectProperties {
}
type NativeObjectProperties = Partial<_NativeObjectProperties>

interface NativeObjectEvents {
}


/**
 * Base class for all objects with a native implementation.
 */
interface NativeObject extends _NativeObjectProperties {}
 export class NativeObject {


  /**
   * The type of this property defines the interface used by `set`, `get`, and
   * the `Properties` interface. It's value is always undefined.
   */
  public readonly tsProperties: NativeObjectProperties;

  protected constructor(properties?: Properties<NativeObject>);

  /**
   * Gets the current value of the given *property*.
   * @param property 
   */
  get<T extends keyof Properties<this>>(property: T): Properties<this>[T];

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: NativeObjectEvents): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: NativeObjectEvents): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: NativeObjectEvents): this;

  /**
   * Sets the given property.
   * @param property 
   * @param value 
   */
  set<T extends keyof Properties<this>>(property: T, value: Properties<this>[T]): this;

  /**
   * Sets all key-value pairs in the properties object as widget properties.
   * @param properties 
   */
  set(properties: Properties<this>): this;

  /**
   * Notifies all registered listeners for the given *type*.
   * @param type The type of event to trigger
   */
  trigger(type: string): this;

  /**
   * Passes the given *object* it to all listeners registered for this event *type*.
   * @param type The type of event to trigger
   * @param object The object to pass to listener functions.
   */
  trigger(type: string, object: object): this;

  /**
   * Initializes the given *eventObject*  and passes it to all listeners registered for this event *type*.
   * @param type The type of event to trigger
   * @param eventObject An instance of `EventObject` (or a subclass) to pass to listener functions.
   */
  trigger(type: string, eventObject: EventObject<this>): this;

  /**
   * An application-wide unique identifier automatically assigned to all native objects on creation.
   * @static
   */
  readonly cid: string;
}

// Popup

interface _PopupProperties extends _NativeObjectProperties {
}
type PopupProperties = Partial<_PopupProperties>

interface PopupEvents extends NativeObjectEvents {
}


/**
 * Base class for all pop-up UI elements. Pop-ups are placed on top of all other UI, but are not
 * widgets. Some pop-ups can be opened only once.
 */
interface Popup extends _PopupProperties {}
 export class Popup extends NativeObject {


  /**
   * The type of this property defines the interface used by `set`, `get`, and
   * the `Properties` interface. It's value is always undefined.
   */
  public readonly tsProperties: PopupProperties;

  protected constructor();

  /**
   * Hides the popup.
   */
  close(): this;

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: PopupEvents): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: PopupEvents): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: PopupEvents): this;

  /**
   * Makes the popup visible.
   */
  open(): this;
}

// Printer

interface _PrinterProperties extends _NativeObjectProperties {
}
type PrinterProperties = Partial<_PrinterProperties>

interface PrinterEvents extends NativeObjectEvents {
}


/**
 * Allows to print PDF documents from the device. A printer object is always available from
 * tabris.printer.
 */
interface Printer extends _PrinterProperties {}
 export class Printer extends NativeObject {


  /**
   * The type of this property defines the interface used by `set`, `get`, and
   * the `Properties` interface. It's value is always undefined.
   */
  public readonly tsProperties: PrinterProperties;

  private constructor();

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: PrinterEvents): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: PrinterEvents): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: PrinterEvents): this;

  /**
   * Prints a PDF document using the native printing capabilities of the device. The data has to be
   * provided as an `ArrayBuffer` or typed array. The method returns a promise which resolves to an event
   * object with the property `result`. The `result` can either be `completed` or `canceled`. When
   * printing fails the promise is rejected with an `Error` parameter containing additional information
   * about the error. Supported on iOS and Android 4.4+.
   * @param data The bytes of the document to print. The value can either be an ArrayBuffer or a typed array.
   * @param options An optional set of configuration parameters. Setting the `jobName` allows to provide the document name shown the user.
   */
  print(data: any, options?: {jobName?: string}): Promise<any>;
}

declare let printer: Printer;

// TimeDialog

interface _TimeDialogProperties extends _PopupProperties {

  /**
   * The time to be displayed in the dialog. The current date is used when no date is provided.
   */
  date: Date;
}
type TimeDialogProperties = Partial<_TimeDialogProperties>

interface TimeDialogEvents extends PopupEvents {

  /**
   * Fired when the time dialog was closed.
   */
  close?: (event: TimeDialogCloseEvent) => void;

  /**
   * Fired when a time was selected by the user.
   */
  select?: (event: TimeDialogSelectEvent) => void;

  /**
   * Fired when the [*date*](#date) property has changed.
   * @param value The new value of [*date*](#date).
   */
  dateChanged?: (event: PropertyChangedEvent<TimeDialog, Date>) => void;
}


interface TimeDialogCloseEvent extends EventObject<TimeDialog> {
  readonly date: Date;
}

interface TimeDialogSelectEvent extends EventObject<TimeDialog> {
  readonly date: Date;
}

/**
 * A `TimeDialog` represents a native dialog pop-up allowing the user to pick a time of day. Properties
 * can only be set before open() is called. The dialog is automatically disposed when closed.
 */
interface TimeDialog extends _TimeDialogProperties {}
 export class TimeDialog extends Popup {


  /**
   * The type of this property defines the interface used by `set`, `get`, and
   * the `Properties` interface. It's value is always undefined.
   */
  public readonly tsProperties: TimeDialogProperties;

  public constructor(properties?: TimeDialogProperties);

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: TimeDialogEvents): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: TimeDialogEvents): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: TimeDialogEvents): this;
}

// UI

interface _UIProperties extends _CompositeProperties {

  /**
   * The content view is the container for the widgets that constitute the app's main UI. It covers the
   * entire app area. Widgets can be appended directly to the content view.
   * @static
   */
  contentView: Composite;

  /**
   * A drawer that can be swiped in from the left edge of the screen. The drawer is locked by default. To
   * use it in an application, set the property `locked` to `false`. The drawer can contain any kind of
   * widgets.
   * @static
   */
  drawer: Drawer;

  /**
   * Represents the system navigation bar is the onscreen area where *Back*, *Home* and similar buttons
   * are displayed. It is only supported on Android.
   * @static
   */
  navigationBar: NavigationBar;

  /**
   * Represents the system status bar. This is the area where notifications, status icons and device time
   * are displayed.
   * @static
   */
  statusBar: StatusBar;
}
type UIProperties = Partial<_UIProperties>

interface UIEvents extends CompositeEvents {
}


/**
 * Represents the top-level parent for all widgets. It provides access to the status bar, the navigation
 * bar, the drawer and the content view.
 */
interface UI extends _UIProperties {}
 export class UI extends Composite {


  /**
   * The type of this property defines the interface used by `set`, `get`, and
   * the `Properties` interface. It's value is always undefined.
   */
  public readonly tsProperties: UIProperties;

  private constructor();

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: UIEvents): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: UIEvents): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: UIEvents): this;
}

declare let ui: UI;

// WidgetCollection

/**
 * A `WidgetCollection` is an array-like object representing a set of widgets, as returned by the widget
 * methods `children` and `find`.
 */
 export class WidgetCollection<T extends Widget> {

  public constructor(widgets?: Widget[]);

  /**
   * Animates all widgets in this collection.
   * @param properties The properties and target values to animate.
   * @param options Configures the animation itself.
   */
  animate(properties: {transform?: Transformation, opacity?: number}, options: AnimationOptions): void;

  /**
   * Appends all widgets in this collection to the given parent widget.
   * @param parent The parent widget to append to.
   */
  appendTo(parent: Composite): this;

  /**
   * Returns a collection containing all children of all widgets in this collection that match the given
   * selector.
   * @param selector A selector expression or a predicate function to filter the results.
   */
  children(selector?: Selector): WidgetCollection<Widget>;

  /**
   * Returns a collection containing all children of all widgets in this collection that are instances of
   * the given class.
   * @param constructor A class to filter the results.
   */
  children<U extends Widget>(constructor: { new (...args: any[]): U }): WidgetCollection<U>;

  /**
   * Disposes all widgets in this collection.
   */
  dispose(): void;

  /**
   * Returns a new *WidgetCollection* containing all widgets in this collection that match the given
   * selector.
   * @param selector A selector expression or a predicate function to filter the results.
   */
  filter(selector: Selector): WidgetCollection<T>;

  /**
   * Returns a new *WidgetCollection* containing all widgets in this collection that are instances of the
   * given class.
   * @param constructor A class to filter the results.
   */
  filter<U extends Widget>(constructor: { new (...args: any[]): U }): WidgetCollection<U>;

  /**
   * Returns a collection containing all descendants of all widgets in this collection that match the
   * given selector.
   * @param selector A selector expression or a predicate function to filter the results.
   */
  find(selector?: Selector): WidgetCollection<Widget>;

  /**
   * Returns a collection containing all descendants of all widgets in this collection that are instances
   * of the given class.
   * @param constructor A class to filter the results.
   */
  find<U extends Widget>(constructor: { new (...args: any[]): U }): WidgetCollection<U>;

  /**
   * Returns the first widget in the collection that is matched by the selector. Without selector, it is
   * the same as `collection[0]`.
   * @param selector A selector expression or a predicate function to filter the results.
   */
  first(selector?: Selector): T|undefined;

  /**
   * Returns the first widget in the collection that is an instance of the given class.
   * @param constructor A class to filter the results.
   */
  first<U extends Widget>(constructor: { new (...args: any[]): U }|undefined): U;

  /**
   * Calls the given callback function once for each widget in the collection.
   * @param callback The function to call for each widget. The arguments are: *widget*, *index*, *collection*
   */
  forEach(callback: (widget: T, index: number, collection: WidgetCollection<T>) => void): void;

  /**
   * Returns the value of the given property of the first widget in this collection.
   * @param property 
   */
  get(property: string): any;

  /**
   * Returns `true` if the given widget is included in the collection, `false` otherwise.
   * @param widget The widget to search in the collection.
   */
  includes(widget: T): boolean;

  /**
   * Returns the index of the given widget within the collection, or `-1` if the widget is not present.
   * @param widget The widget to locate in the collection.
   */
  indexOf(widget: T): number;

  /**
   * Returns the last widget in the collection that is matched by the selector. Without selector, it is
   * the same as `collection[collection.length - 1]`.
   * @param selector A selector expression or a predicate function to filter the results.
   */
  last(selector?: Selector): T | undefined;

  /**
   * Returns the last widget in the collection that is an instance of the given class.
   * @param constructor A class to filter the results.
   */
  last<U extends Widget>(constructor: { new (...args: any[]): U } | undefined): U;

  /**
   * Removes the given listener from all widgets in this collection. See also `Widget.off()`.
   * @param event 
   * @param listener 
   * @param context 
   */
  off(event: string, listener: Function, context?: this): this;

  /**
   * Adds the given listener to all widgets in this collection. See also `Widget.on()`.
   * @param event 
   * @param listener 
   * @param context In the listener function, `this` will point to this object.
   */
  on(event: string, listener: Function, context?: this): this;

  /**
   * Adds the given listener for single execution on all widgets in this collection. See also
   * `Widget.once()`.
   * @param event 
   * @param listener 
   * @param context In the listener function, `this` will point to this object.
   */
  once(event: string, listener: Function, context?: this): this;

  /**
   * Returns a collection containing all direct parents of the widgets in this collection.
   */
  parent(): WidgetCollection<Widget>;

  /**
   * Sets the given property on all widgets in this collection. See also `Widget.set()`.
   * @param property 
   * @param value 
   */
  set(property: string, value: any): this;

  /**
   * Sets all key-value pairs in the properties object on all widgets in this collection. See also
   * `Widget.set()`.
   * @param properties 
   */
  set(properties: WidgetProperties & {[k: string]: any}): this;

  /**
   * Returns an Array containing all widgets in the collection.
   */
  toArray(): T[];

  /**
   * Triggers an event of the given type on all widgets in this collection. See also `Widget.trigger()`
   * @param event 
   * @param params 
   */
  trigger(event: string, ...params: any[]): this;


  [key: number]: T;

  /**
   * Contains the number of widgets in the collection.
   */
  readonly length: number;
}

// Action

interface _ActionProperties extends _WidgetProperties {

  /**
   * Icon image for the action.
   */
  image: Image|null;

  /**
   * Actions with higher placement priority will be placed at a more significant position in the UI, e.g.
   * low priority actions could go into a menu instead of being included in a toolbar.
   */
  placementPriority: "high" | "low" | "normal";

  /**
   * The text to be displayed for the action.
   */
  title: string;

  /**
   * Allows to override the image of the Action with an MDL2 ("Metro Design Language 2") symbol. When the
   * string does not exactly match [the name of an MDL2
   * symbol](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.controls.symbol.aspx)
   * the `image` property is used instead. Platforms other than windows ignore this property and always
   * show the image.
   */
  win_symbol: string;
}
type ActionProperties = Partial<_ActionProperties>

interface ActionEvents extends WidgetEvents {

  /**
   * Fired when the action is invoked.
   */
  select?: (event: EventObject<Action>) => void;

  /**
   * Fired when the [*image*](#image) property has changed.
   * @param value The new value of [*image*](#image).
   */
  imageChanged?: (event: PropertyChangedEvent<Action, Image>) => void;

  /**
   * Fired when the [*placementPriority*](#placementPriority) property has changed.
   * @param value The new value of [*placementPriority*](#placementPriority).
   */
  placementPriorityChanged?: (event: PropertyChangedEvent<Action, string>) => void;

  /**
   * Fired when the [*title*](#title) property has changed.
   * @param value The new value of [*title*](#title).
   */
  titleChanged?: (event: PropertyChangedEvent<Action, string>) => void;

  /**
   * Fired when the [*win_symbol*](#win_symbol) property has changed.
   * @param value The new value of [*win_symbol*](#win_symbol).
   */
  win_symbolChanged?: (event: PropertyChangedEvent<Action, string>) => void;
}


/**
 * An executable item that is integrated in the application's navigation menu. Add a listener on
 * *select* to implement the action.
 */
interface Action extends _ActionProperties {}
 export class Action extends Widget {


  /**
   * The type of this property defines the interface used by `set`, `get`, and
   * the `Properties` interface. It's value is always undefined.
   */
  public readonly tsProperties: ActionProperties;

  public constructor(properties?: Properties<Action>);

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: ActionEvents): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: ActionEvents): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: ActionEvents): this;
}

// ActivityIndicator

interface _ActivityIndicatorProperties extends _WidgetProperties {

  /**
   * The color of the indicator.
   */
  tintColor: Color;
}
type ActivityIndicatorProperties = Partial<_ActivityIndicatorProperties>

interface ActivityIndicatorEvents extends WidgetEvents {

  /**
   * Fired when the [*tintColor*](#tintColor) property has changed.
   * @param value The new value of [*tintColor*](#tintColor).
   */
  tintColorChanged?: (event: PropertyChangedEvent<ActivityIndicator, Color>) => void;
}


/**
 * A widget representing a spinning indicator for indeterminate loading / processing time.
 */
interface ActivityIndicator extends _ActivityIndicatorProperties {}
 export class ActivityIndicator extends Widget {


  /**
   * The type of this property defines the interface used by `set`, `get`, and
   * the `Properties` interface. It's value is always undefined.
   */
  public readonly tsProperties: ActivityIndicatorProperties;

  public constructor(properties?: Properties<ActivityIndicator>);

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: ActivityIndicatorEvents): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: ActivityIndicatorEvents): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: ActivityIndicatorEvents): this;
}

// Button

interface _ButtonProperties extends _WidgetProperties {

  /**
   * The horizontal alignment of the button text.
   */
  alignment: "center" | "left" | "right";

  /**
   * An image to be displayed on the button.
   */
  image: Image|null;

  /**
   * The button's label text.
   */
  text: string;

  /**
   * The color of the text.
   */
  textColor: Color;
}
type ButtonProperties = Partial<_ButtonProperties>

interface ButtonEvents extends WidgetEvents {

  /**
   * Fired when the button is pressed.
   */
  select?: (event: EventObject<Button>) => void;

  /**
   * Fired when the [*alignment*](#alignment) property has changed.
   * @param value The new value of [*alignment*](#alignment).
   */
  alignmentChanged?: (event: PropertyChangedEvent<Button, string>) => void;

  /**
   * Fired when the [*image*](#image) property has changed.
   * @param value The new value of [*image*](#image).
   */
  imageChanged?: (event: PropertyChangedEvent<Button, Image>) => void;

  /**
   * Fired when the [*text*](#text) property has changed.
   * @param value The new value of [*text*](#text).
   */
  textChanged?: (event: PropertyChangedEvent<Button, string>) => void;

  /**
   * Fired when the [*textColor*](#textColor) property has changed.
   * @param value The new value of [*textColor*](#textColor).
   */
  textColorChanged?: (event: PropertyChangedEvent<Button, Color>) => void;
}


/**
 * A push button. Can contain a text or an image.
 */
interface Button extends _ButtonProperties {}
 export class Button extends Widget {


  /**
   * The type of this property defines the interface used by `set`, `get`, and
   * the `Properties` interface. It's value is always undefined.
   */
  public readonly tsProperties: ButtonProperties;

  public constructor(properties?: Properties<Button>);

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: ButtonEvents): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: ButtonEvents): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: ButtonEvents): this;
}

// Canvas

interface _CanvasProperties extends _CompositeProperties {
}
type CanvasProperties = Partial<_CanvasProperties>

interface CanvasEvents extends CompositeEvents {
}


/**
 * Canvas is a widget that can be used to draw graphics using a [canvas context](./CanvasContext.md).
 */
interface Canvas extends _CanvasProperties {}
 export class Canvas extends Composite {


  /**
   * The type of this property defines the interface used by `set`, `get`, and
   * the `Properties` interface. It's value is always undefined.
   */
  public readonly tsProperties: CanvasProperties;

  public constructor(properties?: Properties<Canvas>);

  /**
   * Returns the drawing context with the given size.
   * @param contextType The context identifier. Only `"2d"` is currently supported.
   * @param width the width of the canvas context to create
   * @param height the height of the canvas context to create
   */
  getContext(contextType: string, width: number, height: number): CanvasContext;

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: CanvasEvents): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: CanvasEvents): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: CanvasEvents): this;
}

// CheckBox

interface _CheckBoxProperties extends _WidgetProperties {

  /**
   * The checked state of the check box.
   */
  checked: boolean;

  /**
   * The color of the selectable area in checked state. Will fall back to `tintColor` if not set.
   */
  checkedTintColor: Color;

  /**
   * The label text of the check box.
   */
  text: string;

  /**
   * The color of the text.
   */
  textColor: Color;

  /**
   * The color of the selectable area.
   */
  tintColor: Color;
}
type CheckBoxProperties = Partial<_CheckBoxProperties>

interface CheckBoxEvents extends WidgetEvents {

  /**
   * Fired when the check box is checked or unchecked by the user.
   */
  select?: (event: CheckBoxSelectEvent) => void;

  /**
   * Fired when the [*checked*](#checked) property has changed.
   * @param value The new value of [*checked*](#checked).
   */
  checkedChanged?: (event: PropertyChangedEvent<CheckBox, boolean>) => void;

  /**
   * Fired when the [*checkedTintColor*](#checkedTintColor) property has changed.
   * @param value The new value of [*checkedTintColor*](#checkedTintColor).
   */
  checkedTintColorChanged?: (event: PropertyChangedEvent<CheckBox, Color>) => void;

  /**
   * Fired when the [*text*](#text) property has changed.
   * @param value The new value of [*text*](#text).
   */
  textChanged?: (event: PropertyChangedEvent<CheckBox, string>) => void;

  /**
   * Fired when the [*textColor*](#textColor) property has changed.
   * @param value The new value of [*textColor*](#textColor).
   */
  textColorChanged?: (event: PropertyChangedEvent<CheckBox, Color>) => void;

  /**
   * Fired when the [*tintColor*](#tintColor) property has changed.
   * @param value The new value of [*tintColor*](#tintColor).
   */
  tintColorChanged?: (event: PropertyChangedEvent<CheckBox, Color>) => void;
}


interface CheckBoxSelectEvent extends EventObject<CheckBox> {
  readonly checked: boolean;
}

/**
 * A check box widget.
 */
interface CheckBox extends _CheckBoxProperties {}
 export class CheckBox extends Widget {


  /**
   * The type of this property defines the interface used by `set`, `get`, and
   * the `Properties` interface. It's value is always undefined.
   */
  public readonly tsProperties: CheckBoxProperties;

  public constructor(properties?: Properties<CheckBox>);

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: CheckBoxEvents): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: CheckBoxEvents): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: CheckBoxEvents): this;
}

// CollectionView

interface _CollectionViewProperties extends _WidgetProperties {

  /**
   * The height of a collection cell. If set to `"auto"`, the cell height will be calculated individually
   * for each cell. If set to a function, this function will be called for every item, providing the item
   * index and the cell type as parameters, and must return the cell height for the given item.
   */
  cellHeight: number|"auto"|((index: number, cellType: string) => number|"auto");

  /**
   * The name of the cell type to use for the item at the given index. This name will be passed to the
   * `createCell` and `cellHeight` callbacks. Cells will be reused only for those items that map to the
   * same cell type. If set to a function, this function will be called for every item, providing the item
   * index as a parameter, and must return a unique name for the cell type to use for the given item.
   */
  cellType: string|((index: number) => string)|null;

  /**
   * The number of columns to display in the collection view. If set to a value `n > 1`, each row will
   * contain `n` items. The available space will be equally distributed between columns. On Windows, this
   * feature cannot be combined with variable cell height.
   */
  columnCount: number;

  /**
   * A callback used to create a new reusable cell widget for a given type. This callback will be called
   * by the framework and the created cell will be reused for different items. The created widget should
   * be populated in the `updateCell` function.
   * @static
   */
  createCell: (cellType: string) => Widget;

  /**
   * The number of items to display. To add or remove items later, use the methods `insert()` and
   * `remove()` instead of setting the `itemCount`. To display a new list of items, use the `load()`
   * method.
   */
  itemCount: number;

  /**
   * Enables the user to trigger a refresh by using the pull-to-refresh gesture.
   */
  refreshEnabled: boolean;

  /**
   * Whether the refresh indicator is currently visible. Will be set to `true` when a *refresh* event is
   * triggered. Reset it to `false` when the refresh is finished.
   */
  refreshIndicator: boolean;

  /**
   * The message text displayed together with the refresh indicator. Currently not supported on Android.
   */
  refreshMessage: string;

  /**
   * A callback used to update a given cell widget to display the item with the given index. This callback
   * will be called by the framework.
   * @static
   */
  updateCell: (cell: Widget, index: number) => void;
}
type CollectionViewProperties = Partial<_CollectionViewProperties>

interface CollectionViewEvents extends WidgetEvents {

  /**
   * Fired when the user requested a refresh. An event listener should reset the *refreshIndicator*
   * property when refresh is finished.
   */
  refresh?: (event: EventObject<CollectionView>) => void;

  /**
   * Fired while the collection view is scrolling.
   */
  scroll?: (event: CollectionViewScrollEvent) => void;

  /**
   * Fired when a cell is selected.
   */
  select?: (event: CollectionViewSelectEvent) => void;

  /**
   * Fired when the [*cellHeight*](#cellHeight) property has changed.
   * @param value The new value of [*cellHeight*](#cellHeight).
   */
  cellHeightChanged?: (event: PropertyChangedEvent<CollectionView, number|"auto"|((index: number, cellType: string) => number|"auto")>) => void;

  /**
   * Fired when the [*cellType*](#cellType) property has changed.
   * @param value The new value of [*cellType*](#cellType).
   */
  cellTypeChanged?: (event: PropertyChangedEvent<CollectionView, string|((index: number) => string)|null>) => void;

  /**
   * Fired when the [*columnCount*](#columnCount) property has changed.
   * @param value The new value of [*columnCount*](#columnCount).
   */
  columnCountChanged?: (event: PropertyChangedEvent<CollectionView, number>) => void;

  /**
   * Fired when the [*firstVisibleIndex*](#firstVisibleIndex) property has changed.
   * @param value The new value of [*firstVisibleIndex*](#firstVisibleIndex).
   */
  firstVisibleIndexChanged?: (event: PropertyChangedEvent<CollectionView, number>) => void;

  /**
   * Fired when the [*itemCount*](#itemCount) property has changed.
   * @param value The new value of [*itemCount*](#itemCount).
   */
  itemCountChanged?: (event: PropertyChangedEvent<CollectionView, number>) => void;

  /**
   * Fired when the [*lastVisibleIndex*](#lastVisibleIndex) property has changed.
   * @param value The new value of [*lastVisibleIndex*](#lastVisibleIndex).
   */
  lastVisibleIndexChanged?: (event: PropertyChangedEvent<CollectionView, number>) => void;

  /**
   * Fired when the [*refreshEnabled*](#refreshEnabled) property has changed.
   * @param value The new value of [*refreshEnabled*](#refreshEnabled).
   */
  refreshEnabledChanged?: (event: PropertyChangedEvent<CollectionView, boolean>) => void;

  /**
   * Fired when the [*refreshIndicator*](#refreshIndicator) property has changed.
   * @param value The new value of [*refreshIndicator*](#refreshIndicator).
   */
  refreshIndicatorChanged?: (event: PropertyChangedEvent<CollectionView, boolean>) => void;

  /**
   * Fired when the [*refreshMessage*](#refreshMessage) property has changed.
   * @param value The new value of [*refreshMessage*](#refreshMessage).
   */
  refreshMessageChanged?: (event: PropertyChangedEvent<CollectionView, string>) => void;
}


interface CollectionViewScrollEvent extends EventObject<CollectionView> {
  readonly deltaX: number;
  readonly deltaY: number;
}

interface CollectionViewSelectEvent extends EventObject<CollectionView> {
  readonly index: number;
}

/**
 * A scrollable list that displays data items in cells, one per row. Cells are created on demand by the
 * *createCell* callback and reused on scrolling.
 */
interface CollectionView extends _CollectionViewProperties {}
 export class CollectionView extends Widget {


  /**
   * The type of this property defines the interface used by `set`, `get`, and
   * the `Properties` interface. It's value is always undefined.
   */
  public readonly tsProperties: CollectionViewProperties;

  public constructor(properties?: Properties<CollectionView>);

  /**
   * Inserts one or more items at the given index. When no *count* is specified, a single item will be
   * added at the given *index*. New cells may be created if needed. The `updateCell` callback will only
   * be called for those new items that become immediately visible. Note that inserting new items changes
   * the index of all subsequent items. This operation will update the `itemCount` property.
   * @param index 
   * @param count The position to insert the items at. A negative index is interpreted as relative to the end. If the given index is greater than the item count, new items will be appended at the end.
   */
  insert(index: number, count?: number): void;

  /**
   * Loads a new model with the given *itemCount*. This operation will update the `itemCount` property.
   * @param itemCount The number of items in the model to load.
   */
  load(itemCount: number): void;

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: CollectionViewEvents): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: CollectionViewEvents): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: CollectionViewEvents): this;

  /**
   * Triggers an update of the item at the given *index* by calling the `updateCell` callback of the
   * corresponding. If no *index* is given, all visible items will be updated.
   * @param index The index of the item that was changed.
   */
  refresh(index?: number): void;

  /**
   * Removes one or more items beginning with the given index. When no *count* is given, only the item at
   * *index* will be removed. Note that this changes the index of all subsequent items, however. This
   * operation will update the `itemCount` property.
   * @param index The index of the first item to remove. A negative value is interpreted as relative to the end.
   * @param count The number of items to remove.
   */
  remove(index: number, count?: number): void;

  /**
   * Scrolls the item with the given index into view.
   * @param index The index of the item to reveal. If this is negative, it is interpreted as relative to the end
   */
  reveal(index: number): void;

  /**
   * The index of the first item that is currently visible on screen.
   */
  readonly firstVisibleIndex: number;

  /**
   * The index of the last item that is currently visible on screen.
   */
  readonly lastVisibleIndex: number;
}

// Composite

interface _CompositeProperties extends _WidgetProperties {

  /**
   * Additional space to add inside the widget's bounds. If set to a number, this padding will be applied
   * on all four sides.
   */
  padding: BoxDimensions|number;
}
type CompositeProperties = Partial<_CompositeProperties>

interface CompositeEvents extends WidgetEvents {

  /**
   * Fired when a child is added to this widget.
   */
  addChild?: (event: CompositeAddChildEvent) => void;

  /**
   * Fired when a child is removed from this widget.
   */
  removeChild?: (event: CompositeRemoveChildEvent) => void;

  /**
   * Fired when the [*padding*](#padding) property has changed.
   * @param value The new value of [*padding*](#padding).
   */
  paddingChanged?: (event: PropertyChangedEvent<Composite, BoxDimensions|number>) => void;
}


interface CompositeAddChildEvent extends EventObject<Composite> {
  readonly child: Widget;
  readonly index: number;
}

interface CompositeRemoveChildEvent extends EventObject<Composite> {
  readonly child: Widget;
  readonly index: number;
}

/**
 * An empty widget that can contain other widgets.
 */
interface Composite extends _CompositeProperties {}
 export class Composite extends Widget {


  /**
   * The type of this property defines the interface used by `set`, `get`, and
   * the `Properties` interface. It's value is always undefined.
   */
  public readonly tsProperties: CompositeProperties;

  public constructor(properties?: Properties<Composite>);

  /**
   * Adds the given widgets to the composite.
   * @param widgets 
   */
  append(...widgets: Widget[]): this;

  /**
   * Adds all widgets in the given array to the composite.
   * @param widgets 
   */
  append(widgets: Widget[]): this;

  /**
   * Adds all widgets in the given collection to the composite.
   * @param widgets 
   */
  append(widgets: WidgetCollection<Widget>): this;

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: CompositeEvents): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: CompositeEvents): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: CompositeEvents): this;
}

// Drawer

interface _DrawerProperties extends _CompositeProperties {

  /**
   * Controls whether the drawer can be opened and closed. When set to `false`, the drawer cannot be
   * opened and calls to `drawer.open()` will be ignored.
   */
  enabled: boolean;

  /**
   * Controls how the drawer integrates into its targetView. 
   * - `overlay` completely hides the drawer when closed and overlays other content when opened.
   * - `compactOverlay` makes the drawer partially visible when closed so a 48px wide bar remains
   * side-by-side with the targetViews other content. If a drawer-action controls the drawer it is placed
   * inside this bar. When the drawer is opened its remaining width overlays the targetViews other
   * content.
   * - `inline` completely hides the drawer when closed, but shows it side-by-side with the targetView
   * when opened. The drawer does not close automatically in this mode.
   * - `compactInline` makes the drawer partially visible when closed (like `compactOverlay`), but shows
   * it side-by-side with the targetView when opened (like `inline`).
   * Available only on windows.
   */
  win_displayMode: "compactInline" | "compactOverlay" | "inline" | "overlay";

  /**
   * This property may be set to an instance of NavigationView to make its drawer-action open/close the
   * drawer. It also integrates the drawer into the NavigationView layout. When not set to NavigationView
   * instance the property defaults to `tabris.ui`. Other widgets are not supported. Available only on
   * Windows.
   */
  win_targetView: Widget;
}
type DrawerProperties = Partial<_DrawerProperties>

interface DrawerEvents extends CompositeEvents {

  /**
   * Fired when the drawer is closed and has reached its resting position.
   */
  close?: (event: EventObject<Drawer>) => void;

  /**
   * Fired when the drawer is opened and has reached its resting position.
   */
  open?: (event: EventObject<Drawer>) => void;

  /**
   * Fired when the [*enabled*](#enabled) property has changed.
   * @param value The new value of [*enabled*](#enabled).
   */
  enabledChanged?: (event: PropertyChangedEvent<Drawer, boolean>) => void;

  /**
   * Fired when the [*win_displayMode*](#win_displayMode) property has changed.
   * @param value The new value of [*win_displayMode*](#win_displayMode).
   */
  win_displayModeChanged?: (event: PropertyChangedEvent<Drawer, string>) => void;

  /**
   * Fired when the [*win_targetView*](#win_targetView) property has changed.
   * @param value The new value of [*win_targetView*](#win_targetView).
   */
  win_targetViewChanged?: (event: PropertyChangedEvent<Drawer, Widget>) => void;
}


/**
 * A drawer that can be swiped in from the left edge of the screen. There's only a single instance that
 * can be accessed via `tabris.ui.drawer`. The drawer is locked by default. To use it in an application,
 * set the property `locked` to `false`. The drawer can contain any kind of widgets.
 */
interface Drawer extends _DrawerProperties {}
 export class Drawer extends Composite {


  /**
   * The type of this property defines the interface used by `set`, `get`, and
   * the `Properties` interface. It's value is always undefined.
   */
  public readonly tsProperties: DrawerProperties;

  private constructor();

  /**
   * Closes the drawer.
   */
  close(): this;

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: DrawerEvents): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: DrawerEvents): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: DrawerEvents): this;

  /**
   * Opens the drawer. It may be useful to call this method on first startup, so that users notice the
   * drawer and its contents.
   */
  open(): this;
}

// ImageView

interface _ImageViewProperties extends _WidgetProperties {

  /**
   * The image to display. Providing the `width` and `height` attributes on the image will resize it
   * internally. When no dimensions are given the image will be loaded with its original size. Since the
   * full size image might occupy a lot of memory, it's recommended to provide exact dimensions.
   */
  image: Image|null;

  /**
   * The highest amount the image can be zoomed in to. Setting the `maxZoomLevel` to a level smaller than
   * the current `zoomLevel` changes the `zoomLevel` to be the same as the new `maxZoomLevel`.
   */
  maxZoomLevel: number;

  /**
   * The lowest amount the image can be zoomed out to. Setting the `minZoomLevel` to a level larger than
   * the current `zoomLevel` changes the `zoomLevel` to be the same as the new `minZoomLevel`. 
   */
  minZoomLevel: number;

  /**
   * How to scale the image.
   * - `fit` will scale the image proportionally to fit into the view, possible leaving some empty space
   * at the edges. That is, the image will be displayed as large as possible while being fully contained
   * in the view.
   * - `fill` will scale the image proportionally to fill the entire view, possibly cutting off parts of
   * the image. That is, the image will be displayed as small as possible while covering the entire view.
   * - `auto` will scale *down* the image to *fit* into the view if it is too large, but it won't scale up
   * a smaller image.
   * - `stretch` will resize the image to the actual bounds of the image view.
   * - `none` will not resize the image at all. The image will be displayed in its original size.
   */
  scaleMode: "auto" | "fill" | "fit" | "none" | "stretch";

  /**
   * A color to change the image appearance. All opaque parts of the image will be tinted with the given
   * color. Set to `initial` to remove the effect.
   */
  tintColor: Color;

  /**
   * Enables the pinch-to-zoom gesture on the `ImageView` and makes the properties `zoomLevel`,
   * `minZoomLevel` and `maxZoomLevel` available. Setting `zoomEnabled` to `false` also resets the
   * `zoomLevel`, `minZoomLevel`, `maxZoomLevel` to their respective defaults.
   */
  zoomEnabled: boolean;

  /**
   * The amount that the image is zoomed in or out. The default position without any zooming has the value
   * 1.0.
   */
  zoomLevel: number;
}
type ImageViewProperties = Partial<_ImageViewProperties>

interface ImageViewEvents extends WidgetEvents {

  /**
   * Fired when the image loading has finished.
   */
  load?: (event: ImageViewLoadEvent) => void;

  /**
   * Fired when the user zooms the image in or out. The `zoom` event indicates a change to the `zoomLevel`
   * property.
   */
  zoom?: (event: ImageViewZoomEvent) => void;

  /**
   * Fired when the [*image*](#image) property has changed.
   * @param value The new value of [*image*](#image).
   */
  imageChanged?: (event: PropertyChangedEvent<ImageView, Image>) => void;

  /**
   * Fired when the [*maxZoomLevel*](#maxZoomLevel) property has changed.
   * @param value The new value of [*maxZoomLevel*](#maxZoomLevel).
   */
  maxZoomLevelChanged?: (event: PropertyChangedEvent<ImageView, number>) => void;

  /**
   * Fired when the [*minZoomLevel*](#minZoomLevel) property has changed.
   * @param value The new value of [*minZoomLevel*](#minZoomLevel).
   */
  minZoomLevelChanged?: (event: PropertyChangedEvent<ImageView, number>) => void;

  /**
   * Fired when the [*scaleMode*](#scaleMode) property has changed.
   * @param value The new value of [*scaleMode*](#scaleMode).
   */
  scaleModeChanged?: (event: PropertyChangedEvent<ImageView, string>) => void;

  /**
   * Fired when the [*tintColor*](#tintColor) property has changed.
   * @param value The new value of [*tintColor*](#tintColor).
   */
  tintColorChanged?: (event: PropertyChangedEvent<ImageView, Color>) => void;

  /**
   * Fired when the [*zoomEnabled*](#zoomEnabled) property has changed.
   * @param value The new value of [*zoomEnabled*](#zoomEnabled).
   */
  zoomEnabledChanged?: (event: PropertyChangedEvent<ImageView, boolean>) => void;

  /**
   * Fired when the [*zoomLevel*](#zoomLevel) property has changed.
   * @param value The new value of [*zoomLevel*](#zoomLevel).
   */
  zoomLevelChanged?: (event: PropertyChangedEvent<ImageView, number>) => void;
}


interface ImageViewLoadEvent extends EventObject<ImageView> {
  readonly error: boolean;
}

interface ImageViewZoomEvent extends EventObject<ImageView> {
  readonly zoomLevel: number;
}

/**
 * A widget to display an image.
 */
interface ImageView extends _ImageViewProperties {}
 export class ImageView extends Widget {


  /**
   * The type of this property defines the interface used by `set`, `get`, and
   * the `Properties` interface. It's value is always undefined.
   */
  public readonly tsProperties: ImageViewProperties;

  public constructor(properties?: Properties<ImageView>);

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: ImageViewEvents): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: ImageViewEvents): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: ImageViewEvents): this;
}

// NavigationBar

interface _NavigationBarProperties extends _WidgetProperties {

  /**
   * Background color of the navigation bar.
   */
  background: Color;

  /**
   * Controls how the navigation bar is positioned relative to the `ui.contentView`. The value `default`
   * places the content above the navigation bar. The `hide` option lets the navigation bar disappear,
   * making room for the content. The `float` option lets the content flow underneath the navigation bar.
   */
  displayMode: "default" | "float" | "hide";

  /**
   * Defines the appearance used on the navigation bar. A `dark` theme sets the foreground navigation
   * icons to be of a light color, whereas `light` sets the icons to a dark color. The theme should be set
   * in conjunction with the `background` property for contrast. The value `default` selects the default
   * theme that depends on the device and on the app. Available on Android 8+.
   */
  theme: "dark" | "default" | "light";
}
type NavigationBarProperties = Partial<_NavigationBarProperties>

interface NavigationBarEvents extends WidgetEvents {

  /**
   * Fired when the [*background*](#background) property has changed.
   * @param value The new value of [*background*](#background).
   */
  backgroundChanged?: (event: PropertyChangedEvent<NavigationBar, Color>) => void;

  /**
   * Fired when the [*displayMode*](#displayMode) property has changed.
   * @param value The new value of [*displayMode*](#displayMode).
   */
  displayModeChanged?: (event: PropertyChangedEvent<NavigationBar, string>) => void;

  /**
   * Fired when the [*theme*](#theme) property has changed.
   * @param value The new value of [*theme*](#theme).
   */
  themeChanged?: (event: PropertyChangedEvent<NavigationBar, string>) => void;
}


/**
 * The navigation bar is the onscreen area where *Back*, *Home* and similar buttons are displayed. The
 * singleton instance can be accessed via `ui.navigationBar` and is only supported on Android.
 */
interface NavigationBar extends _NavigationBarProperties {}
 export class NavigationBar extends Widget {


  /**
   * The type of this property defines the interface used by `set`, `get`, and
   * the `Properties` interface. It's value is always undefined.
   */
  public readonly tsProperties: NavigationBarProperties;

  private constructor(properties?: Properties<NavigationBar>);

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: NavigationBarEvents): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: NavigationBarEvents): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: NavigationBarEvents): this;

  /**
   * The height of the navigation bar in device independent pixel. Can be used in conjunction with the
   * `displayMode` `float` to offset the content as to not have it covered by the navigation bar.
   * @static
   */
  readonly height: number;
}

// NavigationView

interface _NavigationViewProperties extends _CompositeProperties {

  /**
   * The color used for action icons.
   */
  actionColor: Color;

  /**
   * The color used for action texts. Only applied on Android and Windows. IOS uses the `actionColor` to
   * colorize the action text.
   */
  actionTextColor: Color;

  /**
   * The height of the bottom toolbar. Is 0 if not visible or unsupported by the platform.
   */
  bottomToolbarHeight: number;

  /**
   * Whether to display the so-called "Burger menu" to open the drawer.
   */
  drawerActionVisible: boolean;

  /**
   * Controls what animation to use when animating a page transition.
   */
  pageAnimation: "default" | "none";

  /**
   * The text color used for page titles.
   */
  titleTextColor: Color;

  /**
   * The background color of the toolbar.
   */
  toolbarColor: Color;

  /**
   * Whether the toolbar is visible.
   */
  toolbarVisible: boolean;

  /**
   * The height of the top toolbar. Is 0 if not visible.
   */
  topToolbarHeight: number;

  /**
   * The background color used for the drawer action. It is common to the make this the same color as the
   * splash screen. Available only on Windows.
   */
  win_drawerActionBackground: Color;

  /**
   * Controls the color scheme used for the drawer action. When set to `"default"` the theme is inherited
   * from the NavigationView. Available only on Windows.
   */
  win_drawerActionTheme: "dark" | "default" | "light";

  /**
   * Controls the color scheme used for the toolbar's overflow menu. When set to `"default"` the theme is
   * inherited from the toolbar. Available only on Windows.
   */
  win_toolbarOverflowTheme: "dark" | "default" | "light";

  /**
   * Controls the color scheme used for the toolbar. When set to `"default"` the theme is inherited from
   * the NavigationView. Available only on Windows.
   */
  win_toolbarTheme: "dark" | "default" | "light";
}
type NavigationViewProperties = Partial<_NavigationViewProperties>

interface NavigationViewEvents extends CompositeEvents {

  /**
   * Fired when the [*actionColor*](#actionColor) property has changed.
   * @param value The new value of [*actionColor*](#actionColor).
   */
  actionColorChanged?: (event: PropertyChangedEvent<NavigationView, Color>) => void;

  /**
   * Fired when the [*actionTextColor*](#actionTextColor) property has changed.
   * @param value The new value of [*actionTextColor*](#actionTextColor).
   */
  actionTextColorChanged?: (event: PropertyChangedEvent<NavigationView, Color>) => void;

  /**
   * Fired when the height of the bottom toolbar changes, e.g. if it changes visibility.
   * @param value The new value of [*bottomToolbarHeight*](#bottomToolbarHeight).
   */
  bottomToolbarHeightChanged?: (event: PropertyChangedEvent<NavigationView, number>) => void;

  /**
   * Fired when the [*drawerActionVisible*](#drawerActionVisible) property has changed.
   * @param value The new value of [*drawerActionVisible*](#drawerActionVisible).
   */
  drawerActionVisibleChanged?: (event: PropertyChangedEvent<NavigationView, boolean>) => void;

  /**
   * Fired when the [*pageAnimation*](#pageAnimation) property has changed.
   * @param value The new value of [*pageAnimation*](#pageAnimation).
   */
  pageAnimationChanged?: (event: PropertyChangedEvent<NavigationView, string>) => void;

  /**
   * Fired when the [*titleTextColor*](#titleTextColor) property has changed.
   * @param value The new value of [*titleTextColor*](#titleTextColor).
   */
  titleTextColorChanged?: (event: PropertyChangedEvent<NavigationView, Color>) => void;

  /**
   * Fired when the [*toolbarColor*](#toolbarColor) property has changed.
   * @param value The new value of [*toolbarColor*](#toolbarColor).
   */
  toolbarColorChanged?: (event: PropertyChangedEvent<NavigationView, Color>) => void;

  /**
   * Fired when the [*toolbarVisible*](#toolbarVisible) property has changed.
   * @param value The new value of [*toolbarVisible*](#toolbarVisible).
   */
  toolbarVisibleChanged?: (event: PropertyChangedEvent<NavigationView, boolean>) => void;

  /**
   * Fired when the height of the top toolbar changes, e.g. if it changes visibility.
   * @param value The new value of [*topToolbarHeight*](#topToolbarHeight).
   */
  topToolbarHeightChanged?: (event: PropertyChangedEvent<NavigationView, number>) => void;

  /**
   * Fired when the [*win_drawerActionBackground*](#win_drawerActionBackground) property has changed.
   * @param value The new value of [*win_drawerActionBackground*](#win_drawerActionBackground).
   */
  win_drawerActionBackgroundChanged?: (event: PropertyChangedEvent<NavigationView, Color>) => void;

  /**
   * Fired when the [*win_drawerActionTheme*](#win_drawerActionTheme) property has changed.
   * @param value The new value of [*win_drawerActionTheme*](#win_drawerActionTheme).
   */
  win_drawerActionThemeChanged?: (event: PropertyChangedEvent<NavigationView, string>) => void;

  /**
   * Fired when the [*win_toolbarOverflowTheme*](#win_toolbarOverflowTheme) property has changed.
   * @param value The new value of [*win_toolbarOverflowTheme*](#win_toolbarOverflowTheme).
   */
  win_toolbarOverflowThemeChanged?: (event: PropertyChangedEvent<NavigationView, string>) => void;

  /**
   * Fired when the [*win_toolbarTheme*](#win_toolbarTheme) property has changed.
   * @param value The new value of [*win_toolbarTheme*](#win_toolbarTheme).
   */
  win_toolbarThemeChanged?: (event: PropertyChangedEvent<NavigationView, string>) => void;
}


/**
 * A widget that displays a stack of [pages](Page) with a toolbar that allows to navigate back. The
 * toolbar also displays the current page's title and the highest priority [actions](Action) that are
 * added to the NavigationView. Only children of type `Page`, `Action` and `SearchAction` are supported.
 * Since the NavigationView does not compute its own size, the width and height must be defined by the
 * respective layout properties (e.g. either `width` or `left` and `right` must be specified).
 */
interface NavigationView extends _NavigationViewProperties {}
 export class NavigationView extends Composite {


  /**
   * The type of this property defines the interface used by `set`, `get`, and
   * the `Properties` interface. It's value is always undefined.
   */
  public readonly tsProperties: NavigationViewProperties;

  public constructor(properties?: Properties<NavigationView>);

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: NavigationViewEvents): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: NavigationViewEvents): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: NavigationViewEvents): this;

  /**
   * Returns the ordered list of pages on the page stack, with the bottommost page as the first and the
   * topmost page as the last element. Same as children(), but only returns children that are of type
   * `Page`.
   * @param selector A selector expression or a predicate function to filter the results.
   */
  pages(selector?: Selector): WidgetCollection<Page>;

  /**
   * Returns the ordered list of pages on the page stack, with the bottommost page as the first and the
   * topmost page as the last element. Same as children(), but only accepts subclasses of `Page`.
   * @param constructor A class to filter the results.
   */
  pages<U extends Page>(constructor: { new (...args: any[]): U }): WidgetCollection<U>;
}

// Page

interface _PageProperties extends _CompositeProperties {

  /**
   * Defines whether this page will be automatically disposed when popped from the NavigationView, e.g.
   * using native back navigation.
   */
  autoDispose: boolean;

  /**
   * An image to be displayed in the navigation bar. Not supported on Windows.
   */
  image: Image|null;

  /**
   * The page title to be displayed in the navigation bar.
   */
  title: string;
}
type PageProperties = Partial<_PageProperties>

interface PageEvents extends CompositeEvents {

  /**
   * Fired when the page is about to become visible, i.e. it has become the active page.
   */
  appear?: (event: EventObject<Page>) => void;

  /**
   * Fired when the page is no longer visible, i.e. another page has become the active page.
   */
  disappear?: (event: EventObject<Page>) => void;

  /**
   * Fired when the [*autoDispose*](#autoDispose) property has changed.
   * @param value The new value of [*autoDispose*](#autoDispose).
   */
  autoDisposeChanged?: (event: PropertyChangedEvent<Page, boolean>) => void;

  /**
   * Fired when the [*image*](#image) property has changed.
   * @param value The new value of [*image*](#image).
   */
  imageChanged?: (event: PropertyChangedEvent<Page, Image>) => void;

  /**
   * Fired when the [*title*](#title) property has changed.
   * @param value The new value of [*title*](#title).
   */
  titleChanged?: (event: PropertyChangedEvent<Page, string>) => void;
}


/**
 * A container representing a single page of a NavigationView widget.
 */
interface Page extends _PageProperties {}
 export class Page extends Composite {


  /**
   * The type of this property defines the interface used by `set`, `get`, and
   * the `Properties` interface. It's value is always undefined.
   */
  public readonly tsProperties: PageProperties;

  public constructor(properties?: Properties<Page>);

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: PageEvents): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: PageEvents): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: PageEvents): this;
}

// Picker

interface _PickerProperties extends _WidgetProperties {

  /**
   * The color of the border of the Picker. On iOS this is a rectangular border around the Picker, on
   * Android it is a single line below the Picker.
   */
  borderColor: Color;

  /**
   * The color of the background of the Picker - applies only to iOS.
   */
  fillColor: Color;

  /**
   * The number of items to display.
   */
  itemCount: number;

  /**
   * A function that returns the string to display for a given index.
   */
  itemText: (index: number) => string;

  /**
   * The index of the currently selected item.
   */
  selectionIndex: number;

  /**
   * The color of the text.
   */
  textColor: Color;
}
type PickerProperties = Partial<_PickerProperties>

interface PickerEvents extends WidgetEvents {

  /**
   * Fired when an item was selected by the user.
   */
  select?: (event: PickerSelectEvent) => void;

  /**
   * Fired when the [*borderColor*](#borderColor) property has changed.
   * @param value The new value of [*borderColor*](#borderColor).
   */
  borderColorChanged?: (event: PropertyChangedEvent<Picker, Color>) => void;

  /**
   * Fired when the [*fillColor*](#fillColor) property has changed.
   * @param value The new value of [*fillColor*](#fillColor).
   */
  fillColorChanged?: (event: PropertyChangedEvent<Picker, Color>) => void;

  /**
   * Fired when the [*itemCount*](#itemCount) property has changed.
   * @param value The new value of [*itemCount*](#itemCount).
   */
  itemCountChanged?: (event: PropertyChangedEvent<Picker, number>) => void;

  /**
   * Fired when the [*itemText*](#itemText) property has changed.
   * @param value The new value of [*itemText*](#itemText).
   */
  itemTextChanged?: (event: PropertyChangedEvent<Picker, (index: number) => string>) => void;

  /**
   * Fired when the [*selectionIndex*](#selectionIndex) property has changed.
   * @param value The new value of [*selectionIndex*](#selectionIndex).
   */
  selectionIndexChanged?: (event: PropertyChangedEvent<Picker, number>) => void;

  /**
   * Fired when the [*textColor*](#textColor) property has changed.
   * @param value The new value of [*textColor*](#textColor).
   */
  textColorChanged?: (event: PropertyChangedEvent<Picker, Color>) => void;
}


interface PickerSelectEvent extends EventObject<Picker> {
  readonly index: number;
}

/**
 * A widget with a drop-down list of items to choose from.
 */
interface Picker extends _PickerProperties {}
 export class Picker extends Widget {


  /**
   * The type of this property defines the interface used by `set`, `get`, and
   * the `Properties` interface. It's value is always undefined.
   */
  public readonly tsProperties: PickerProperties;

  public constructor(properties?: Properties<Picker>);

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: PickerEvents): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: PickerEvents): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: PickerEvents): this;
}

// ProgressBar

interface _ProgressBarProperties extends _WidgetProperties {

  /**
   * The value that represents a progress of 100%.
   */
  maximum: number;

  /**
   * The value that represents a progress of 0%.
   */
  minimum: number;

  /**
   * The actual progress to be displayed.
   */
  selection: number;

  /**
   * This property affects the color of the progress indicator. Not supported on iOS.
   */
  state: "error" | "normal" | "paused";

  /**
   * The color used to display the current progress.
   */
  tintColor: Color;
}
type ProgressBarProperties = Partial<_ProgressBarProperties>

interface ProgressBarEvents extends WidgetEvents {

  /**
   * Fired when the [*maximum*](#maximum) property has changed.
   * @param value The new value of [*maximum*](#maximum).
   */
  maximumChanged?: (event: PropertyChangedEvent<ProgressBar, number>) => void;

  /**
   * Fired when the [*minimum*](#minimum) property has changed.
   * @param value The new value of [*minimum*](#minimum).
   */
  minimumChanged?: (event: PropertyChangedEvent<ProgressBar, number>) => void;

  /**
   * Fired when the [*selection*](#selection) property has changed.
   * @param value The new value of [*selection*](#selection).
   */
  selectionChanged?: (event: PropertyChangedEvent<ProgressBar, number>) => void;

  /**
   * Fired when the [*state*](#state) property has changed.
   * @param value The new value of [*state*](#state).
   */
  stateChanged?: (event: PropertyChangedEvent<ProgressBar, string>) => void;

  /**
   * Fired when the [*tintColor*](#tintColor) property has changed.
   * @param value The new value of [*tintColor*](#tintColor).
   */
  tintColorChanged?: (event: PropertyChangedEvent<ProgressBar, Color>) => void;
}


/**
 * A widget representing a numeric value as a horizontal bar with a growing indicator.
 */
interface ProgressBar extends _ProgressBarProperties {}
 export class ProgressBar extends Widget {


  /**
   * The type of this property defines the interface used by `set`, `get`, and
   * the `Properties` interface. It's value is always undefined.
   */
  public readonly tsProperties: ProgressBarProperties;

  public constructor(properties?: Properties<ProgressBar>);

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: ProgressBarEvents): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: ProgressBarEvents): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: ProgressBarEvents): this;
}

// RadioButton

interface _RadioButtonProperties extends _WidgetProperties {

  /**
   * The checked state of the radio button.
   */
  checked: boolean;

  /**
   * The color of the selectable area in checked state. Will fall back to `tintColor` if not set.
   */
  checkedTintColor: Color;

  /**
   * The label text of the radio button.
   */
  text: string;

  /**
   * The color of the text.
   */
  textColor: Color;

  /**
   * The color of the selectable area.
   */
  tintColor: Color;
}
type RadioButtonProperties = Partial<_RadioButtonProperties>

interface RadioButtonEvents extends WidgetEvents {

  /**
   * Fired when the radio button is selected or deselected by the user.
   */
  select?: (event: RadioButtonSelectEvent) => void;

  /**
   * Fired when the [*checked*](#checked) property has changed.
   * @param value The new value of [*checked*](#checked).
   */
  checkedChanged?: (event: PropertyChangedEvent<RadioButton, boolean>) => void;

  /**
   * Fired when the [*checkedTintColor*](#checkedTintColor) property has changed.
   * @param value The new value of [*checkedTintColor*](#checkedTintColor).
   */
  checkedTintColorChanged?: (event: PropertyChangedEvent<RadioButton, Color>) => void;

  /**
   * Fired when the [*text*](#text) property has changed.
   * @param value The new value of [*text*](#text).
   */
  textChanged?: (event: PropertyChangedEvent<RadioButton, string>) => void;

  /**
   * Fired when the [*textColor*](#textColor) property has changed.
   * @param value The new value of [*textColor*](#textColor).
   */
  textColorChanged?: (event: PropertyChangedEvent<RadioButton, Color>) => void;

  /**
   * Fired when the [*tintColor*](#tintColor) property has changed.
   * @param value The new value of [*tintColor*](#tintColor).
   */
  tintColorChanged?: (event: PropertyChangedEvent<RadioButton, Color>) => void;
}


interface RadioButtonSelectEvent extends EventObject<RadioButton> {
  readonly checked: boolean;
}

/**
 * A radio button. Selecting a radio button de-selects all its siblings (i.e. all radio buttons within
 * the same parent).
 */
interface RadioButton extends _RadioButtonProperties {}
 export class RadioButton extends Widget {


  /**
   * The type of this property defines the interface used by `set`, `get`, and
   * the `Properties` interface. It's value is always undefined.
   */
  public readonly tsProperties: RadioButtonProperties;

  public constructor(properties?: Properties<RadioButton>);

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: RadioButtonEvents): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: RadioButtonEvents): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: RadioButtonEvents): this;
}

// RefreshComposite

interface _RefreshCompositeProperties extends _CompositeProperties {

  /**
   * Whether the pull-to-refresh gesture can be performed by the user. When disabled, the
   * `RefreshComposite` behaves like a regular `Composite`.
   */
  refreshEnabled: boolean;

  /**
   * Whether to visualize a long running operation. After the user has triggered a manual refresh, this
   * property is `true` and should be set to `false` when the operation ended.
   */
  refreshIndicator: boolean;

  /**
   * A message to show to the user during the refresh operation.
   */
  refreshMessage: string;
}
type RefreshCompositeProperties = Partial<_RefreshCompositeProperties>

interface RefreshCompositeEvents extends CompositeEvents {

  /**
   * Fired when a refresh is triggered by the user.
   */
  refresh?: (event: EventObject<RefreshComposite>) => void;

  /**
   * Fired when the [*refreshEnabled*](#refreshEnabled) property has changed.
   * @param value The new value of [*refreshEnabled*](#refreshEnabled).
   */
  refreshEnabledChanged?: (event: PropertyChangedEvent<RefreshComposite, boolean>) => void;

  /**
   * Fired when the [*refreshIndicator*](#refreshIndicator) property has changed.
   * @param value The new value of [*refreshIndicator*](#refreshIndicator).
   */
  refreshIndicatorChanged?: (event: PropertyChangedEvent<RefreshComposite, boolean>) => void;

  /**
   * Fired when the [*refreshMessage*](#refreshMessage) property has changed.
   * @param value The new value of [*refreshMessage*](#refreshMessage).
   */
  refreshMessageChanged?: (event: PropertyChangedEvent<RefreshComposite, string>) => void;
}


/**
 * A composite allowing to use a pull-to-refresh gesture to trigger and visualize a long running
 * operation.
 */
interface RefreshComposite extends _RefreshCompositeProperties {}
 export class RefreshComposite extends Composite {


  /**
   * The type of this property defines the interface used by `set`, `get`, and
   * the `Properties` interface. It's value is always undefined.
   */
  public readonly tsProperties: RefreshCompositeProperties;

  public constructor(properties?: Properties<RefreshComposite>);

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: RefreshCompositeEvents): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: RefreshCompositeEvents): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: RefreshCompositeEvents): this;
}

// ScrollView

interface _ScrollViewProperties extends _CompositeProperties {

  /**
   * Specifies the scrolling direction of the scroll composite.
   * @static
   */
  direction: "horizontal" | "vertical";
}
type ScrollViewProperties = Partial<_ScrollViewProperties>

interface ScrollViewEvents extends CompositeEvents {

  /**
   * Fired while scrolling horizontally.
   */
  scrollX?: (event: ScrollViewScrollEvent) => void;

  /**
   * Fired while scrolling vertically.
   */
  scrollY?: (event: ScrollViewScrollEvent) => void;

  /**
   * Fired when the [*offsetX*](#offsetX) property has changed.
   * @param value The new value of [*offsetX*](#offsetX).
   */
  offsetXChanged?: (event: PropertyChangedEvent<ScrollView, number>) => void;

  /**
   * Fired when the [*offsetY*](#offsetY) property has changed.
   * @param value The new value of [*offsetY*](#offsetY).
   */
  offsetYChanged?: (event: PropertyChangedEvent<ScrollView, number>) => void;
}


interface ScrollViewScrollEvent extends EventObject<ScrollView> {
  readonly offset: number;
}

/**
 * A composite that allows its content to overflow either vertically (default) or horizontally. Since
 * the ScrollView does not compute its own size, the width and height must be defined by the respective
 * layout properties (e.g. either `width` or `left` and `right` must be specified).
 */
interface ScrollView extends _ScrollViewProperties {}
 export class ScrollView extends Composite {


  /**
   * The type of this property defines the interface used by `set`, `get`, and
   * the `Properties` interface. It's value is always undefined.
   */
  public readonly tsProperties: ScrollViewProperties;

  public constructor(properties?: Properties<ScrollView>);

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: ScrollViewEvents): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: ScrollViewEvents): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: ScrollViewEvents): this;

  /**
   * Scrolls to the given horizontal offset. Give `{animate: false}` as the second parameter to suppress
   * the animation.
   * @param offset The offset to scroll to in dip.
   * @param options An additional object to control the animation. Set to `{animate: false}` to scroll without an animation.
   */
  scrollToX(offset: number, options?: {animate?: boolean}): this;

  /**
   * Scrolls to the given vertical offset. Give `{animate: false}` as the second parameter to suppress the
   * animation.
   * @param offset The offset to scroll to in dip.
   * @param options An additional object to control the animation. Set to `{animate: false}` to scroll without an animation.
   */
  scrollToY(offset: number, options?: {animate?: boolean}): this;

  /**
   * The horizontal scrolling position in dip.
   */
  readonly offsetX: number;

  /**
   * The vertical scrolling position in dip.
   */
  readonly offsetY: number;
}

// SearchAction

interface _SearchActionProperties extends _ActionProperties {

  /**
   * A hint text that is displayed when the search input is empty.
   */
  message: string;

  /**
   * The list of proposals to display.
   */
  proposals: string[];

  /**
   * The text in the search input field.
   */
  text: string;
}
type SearchActionProperties = Partial<_SearchActionProperties>

interface SearchActionEvents extends ActionEvents {

  /**
   * Fired when a text input has been submitted by pressing the keyboard's search key.
   */
  accept?: (event: SearchActionAcceptEvent) => void;

  /**
   * Fired when the user inputs text.
   */
  input?: (event: SearchActionInputEvent) => void;

  /**
   * Fired when the [*message*](#message) property has changed.
   * @param value The new value of [*message*](#message).
   */
  messageChanged?: (event: PropertyChangedEvent<SearchAction, string>) => void;

  /**
   * Fired when the [*proposals*](#proposals) property has changed.
   * @param value The new value of [*proposals*](#proposals).
   */
  proposalsChanged?: (event: PropertyChangedEvent<SearchAction, string[]>) => void;

  /**
   * Fired when the [*text*](#text) property has changed.
   * @param value The new value of [*text*](#text).
   */
  textChanged?: (event: PropertyChangedEvent<SearchAction, string>) => void;
}


interface SearchActionAcceptEvent extends EventObject<SearchAction> {
  readonly text: string;
}

interface SearchActionInputEvent extends EventObject<SearchAction> {
  readonly text: string;
}

/**
 * An action that displays a search text field with dynamic proposals when selected. Add a listener on
 * *select* to implement the action. On *input*, you may set a list of *proposals*.
 */
interface SearchAction extends _SearchActionProperties {}
 export class SearchAction extends Action {


  /**
   * The type of this property defines the interface used by `set`, `get`, and
   * the `Properties` interface. It's value is always undefined.
   */
  public readonly tsProperties: SearchActionProperties;

  public constructor(properties?: Properties<SearchAction>);

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: SearchActionEvents): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: SearchActionEvents): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: SearchActionEvents): this;

  /**
   * Invokes the search action, i.e. displays the UI to perform a search.
   */
  open(): void;
}

// Slider

interface _SliderProperties extends _WidgetProperties {

  /**
   * The maximum value.
   */
  maximum: number;

  /**
   * The minimum value.
   */
  minimum: number;

  /**
   * The actual value.
   */
  selection: number;

  /**
   * The color used to display the current selection.
   */
  tintColor: Color;
}
type SliderProperties = Partial<_SliderProperties>

interface SliderEvents extends WidgetEvents {

  /**
   * Fired when the selection property is changed by the user.
   */
  select?: (event: SliderSelectEvent) => void;

  /**
   * Fired when the [*maximum*](#maximum) property has changed.
   * @param value The new value of [*maximum*](#maximum).
   */
  maximumChanged?: (event: PropertyChangedEvent<Slider, number>) => void;

  /**
   * Fired when the [*minimum*](#minimum) property has changed.
   * @param value The new value of [*minimum*](#minimum).
   */
  minimumChanged?: (event: PropertyChangedEvent<Slider, number>) => void;

  /**
   * Fired when the [*selection*](#selection) property has changed.
   * @param value The new value of [*selection*](#selection).
   */
  selectionChanged?: (event: PropertyChangedEvent<Slider, number>) => void;

  /**
   * Fired when the [*tintColor*](#tintColor) property has changed.
   * @param value The new value of [*tintColor*](#tintColor).
   */
  tintColorChanged?: (event: PropertyChangedEvent<Slider, Color>) => void;
}


interface SliderSelectEvent extends EventObject<Slider> {
  readonly selection: number;
}

/**
 * A widget representing a numeric value as an movable indicator on a horizontal line.
 */
interface Slider extends _SliderProperties {}
 export class Slider extends Widget {


  /**
   * The type of this property defines the interface used by `set`, `get`, and
   * the `Properties` interface. It's value is always undefined.
   */
  public readonly tsProperties: SliderProperties;

  public constructor(properties?: Properties<Slider>);

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: SliderEvents): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: SliderEvents): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: SliderEvents): this;
}

// StatusBar

interface _StatusBarProperties extends _WidgetProperties {

  /**
   * Background color of the status bar. Should be used in conjunction with the `theme` property to keep
   * the status bar icons legible.
   */
  background: Color;

  /**
   * Controls how the status bar is positioned relative to the `ui.contentView`. The value `default`
   * places the content below the status bar. The `hide` option lets the status bar disappear, making more
   * room for the content. The `float` option lets the content flow underneath the status bar. *On Windows
   * `float` is currently not supported and treated as `hide`.*
   */
  displayMode: "default" | "float" | "hide";

  /**
   * Defines the shade used on the status bar. A `dark` theme sets the foreground icons to be of a light
   * color, whereas `light` sets the icons to a dark color. The theme should be set in conjunction with
   * the `background` property for contrast. The value `default` selects the default theme that depends on
   * the device and on the app. Available on iOS and Android 6+.
   */
  theme: "dark" | "default" | "light";
}
type StatusBarProperties = Partial<_StatusBarProperties>

interface StatusBarEvents extends WidgetEvents {

  /**
   * Fired when the [*background*](#background) property has changed.
   * @param value The new value of [*background*](#background).
   */
  backgroundChanged?: (event: PropertyChangedEvent<StatusBar, Color>) => void;

  /**
   * Fired when the [*displayMode*](#displayMode) property has changed.
   * @param value The new value of [*displayMode*](#displayMode).
   */
  displayModeChanged?: (event: PropertyChangedEvent<StatusBar, string>) => void;

  /**
   * Fired when the [*theme*](#theme) property has changed.
   * @param value The new value of [*theme*](#theme).
   */
  themeChanged?: (event: PropertyChangedEvent<StatusBar, string>) => void;
}


/**
 * The status bar is the area where notifications, status icons and device time are displayed. The
 * singleton instance can be accessed via `ui.statusBar`.
 */
interface StatusBar extends _StatusBarProperties {}
 export class StatusBar extends Widget {


  /**
   * The type of this property defines the interface used by `set`, `get`, and
   * the `Properties` interface. It's value is always undefined.
   */
  public readonly tsProperties: StatusBarProperties;

  private constructor(properties?: Properties<StatusBar>);

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: StatusBarEvents): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: StatusBarEvents): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: StatusBarEvents): this;

  /**
   * The height of the status bar in device independent pixel. Can be used in conjunction with the
   * `displayMode` `'float'` to offset the content as to not have it covered by the status bar.
   * @static
   */
  readonly height: number;
}

// Switch

interface _SwitchProperties extends _WidgetProperties {

  /**
   * The checked state of the switch.
   */
  checked: boolean;

  /**
   * The color of the movable thumb, when switched *off*.
   */
  thumbOffColor: Color;

  /**
   * The color of the movable thumb, when switched *on*.
   */
  thumbOnColor: Color;

  /**
   * The color of the track that holds the thumb, when switched *off*.
   */
  trackOffColor: Color;

  /**
   * The color of the track that holds the thumb, when switched *on*.
   */
  trackOnColor: Color;
}
type SwitchProperties = Partial<_SwitchProperties>

interface SwitchEvents extends WidgetEvents {

  /**
   * Fired when the switch is toggled by the user.
   */
  select?: (event: SwitchSelectEvent) => void;

  /**
   * Fired when the [*checked*](#checked) property has changed.
   * @param value The new value of [*checked*](#checked).
   */
  checkedChanged?: (event: PropertyChangedEvent<Switch, boolean>) => void;

  /**
   * Fired when the [*thumbOffColor*](#thumbOffColor) property has changed.
   * @param value The new value of [*thumbOffColor*](#thumbOffColor).
   */
  thumbOffColorChanged?: (event: PropertyChangedEvent<Switch, Color>) => void;

  /**
   * Fired when the [*thumbOnColor*](#thumbOnColor) property has changed.
   * @param value The new value of [*thumbOnColor*](#thumbOnColor).
   */
  thumbOnColorChanged?: (event: PropertyChangedEvent<Switch, Color>) => void;

  /**
   * Fired when the [*trackOffColor*](#trackOffColor) property has changed.
   * @param value The new value of [*trackOffColor*](#trackOffColor).
   */
  trackOffColorChanged?: (event: PropertyChangedEvent<Switch, Color>) => void;

  /**
   * Fired when the [*trackOnColor*](#trackOnColor) property has changed.
   * @param value The new value of [*trackOnColor*](#trackOnColor).
   */
  trackOnColorChanged?: (event: PropertyChangedEvent<Switch, Color>) => void;
}


interface SwitchSelectEvent extends EventObject<Switch> {
  readonly checked: boolean;
}

/**
 * A switch widget that can be toggled.
 */
interface Switch extends _SwitchProperties {}
 export class Switch extends Widget {


  /**
   * The type of this property defines the interface used by `set`, `get`, and
   * the `Properties` interface. It's value is always undefined.
   */
  public readonly tsProperties: SwitchProperties;

  public constructor(properties?: Properties<Switch>);

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: SwitchEvents): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: SwitchEvents): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: SwitchEvents): this;
}

// Tab

interface _TabProperties extends _CompositeProperties {

  /**
   * A badge to attach to the tab.
   */
  badge: string;

  /**
   * An image to be displayed on the tab.  Will not be shown on iOS if the `TabFolder`'s `tabBarLocation`
   * is set to `top`
   */
  image: Image|null;

  /**
   * An image to be displayed on the currently active tab.
   */
  selectedImage: Image|null;

  /**
   * The title to be displayed on the tab.
   */
  title: string;
}
type TabProperties = Partial<_TabProperties>

interface TabEvents extends CompositeEvents {

  /**
   * Fired when the tab will become visible, i.e. the selection of its TabFolder.
   */
  appear?: (event: EventObject<Tab>) => void;

  /**
   * Fired when the tab is no longer visible, i.e. it no longer is the selection of its TabFolder.
   */
  disappear?: (event: EventObject<Tab>) => void;

  /**
   * Fired when the [*badge*](#badge) property has changed.
   * @param value The new value of [*badge*](#badge).
   */
  badgeChanged?: (event: PropertyChangedEvent<Tab, string>) => void;

  /**
   * Fired when the [*image*](#image) property has changed.
   * @param value The new value of [*image*](#image).
   */
  imageChanged?: (event: PropertyChangedEvent<Tab, Image>) => void;

  /**
   * Fired when the [*selectedImage*](#selectedImage) property has changed.
   * @param value The new value of [*selectedImage*](#selectedImage).
   */
  selectedImageChanged?: (event: PropertyChangedEvent<Tab, Image>) => void;

  /**
   * Fired when the [*title*](#title) property has changed.
   * @param value The new value of [*title*](#title).
   */
  titleChanged?: (event: PropertyChangedEvent<Tab, string>) => void;
}


/**
 * A container representing a single tab of a TabFolder widget.
 */
interface Tab extends _TabProperties {}
 export class Tab extends Composite {


  /**
   * The type of this property defines the interface used by `set`, `get`, and
   * the `Properties` interface. It's value is always undefined.
   */
  public readonly tsProperties: TabProperties;

  public constructor(properties?: Properties<Tab>);

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: TabEvents): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: TabEvents): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: TabEvents): this;
}

// TabFolder

interface _TabFolderProperties extends _CompositeProperties {

  /**
   * Enables swiping through tabs. Always enabled on Windows.
   */
  paging: boolean;

  /**
   * The currently selected tab.
   */
  selection: Tab;

  /**
   * The placement of the tab titles. When set to `"hidden"`, the tab bar will not be visible. When set to
   * `"auto"`, the position is platform dependent.
   * @static
   */
  tabBarLocation: "auto" | "bottom" | "hidden" | "top";

  /**
   * Controls how the tabs make use of the available horizontal space. Setting the `tabMode` to `"fixed"`
   * makes the tabs span the entire available space. In case of a very wide `TabFolder` the `"fixed"` mode
   * centers the tabs. The mode `"scrollable"` left aligns the tabs and allows to scroll the tabs if there
   * are more tabs than would fit in the available space. Available on Android only.
   * @static
   */
  tabMode: "fixed" | "scrollable";

  /**
   * The color used for the text of the tab headers.
   */
  textColor: Color;

  /**
   * Controls the color scheme used for the tabBar. When set to `"default"` the theme is inherited from
   * the TabFolder. Available only on Windows.
   */
  win_tabBarTheme: "dark" | "default" | "light";
}
type TabFolderProperties = Partial<_TabFolderProperties>

interface TabFolderEvents extends CompositeEvents {

  /**
   * Fired when `paging` is enabled and a tab is scrolled. The `event` parameter contains position
   * information relative to the currently selected `Tab`. Eg.: scrolling a 500px wide tab 10% to the left
   * sets `offset` to `50`. Scrolling 10% to the right sets `offset` to `-50`.
   */
  scroll?: (event: TabFolderScrollEvent) => void;

  /**
   * Fired when the selection property changes by user interaction.
   */
  select?: (event: TabFolderSelectEvent) => void;

  /**
   * Fired when the [*paging*](#paging) property has changed.
   * @param value The new value of [*paging*](#paging).
   */
  pagingChanged?: (event: PropertyChangedEvent<TabFolder, boolean>) => void;

  /**
   * Fired when the [*selection*](#selection) property has changed.
   * @param value The new value of [*selection*](#selection).
   */
  selectionChanged?: (event: PropertyChangedEvent<TabFolder, Tab>) => void;

  /**
   * Fired when the [*textColor*](#textColor) property has changed.
   * @param value The new value of [*textColor*](#textColor).
   */
  textColorChanged?: (event: PropertyChangedEvent<TabFolder, Color>) => void;

  /**
   * Fired when the [*win_tabBarTheme*](#win_tabBarTheme) property has changed.
   * @param value The new value of [*win_tabBarTheme*](#win_tabBarTheme).
   */
  win_tabBarThemeChanged?: (event: PropertyChangedEvent<TabFolder, string>) => void;
}


interface TabFolderScrollEvent extends EventObject<TabFolder> {
  readonly offset: number;
  readonly selection: Tab;
}

interface TabFolderSelectEvent extends EventObject<TabFolder> {
  readonly selection: Tab;
}

/**
 * A widget that can switch between [tabs](Tab). Only children of type `Tab` are supported. Since the
 * TabFolder does not compute its own size, the width and height must be defined by the respective
 * layout properties (e.g. either `width` or `left` and `right` must be specified).
 */
interface TabFolder extends _TabFolderProperties {}
 export class TabFolder extends Composite {


  /**
   * The type of this property defines the interface used by `set`, `get`, and
   * the `Properties` interface. It's value is always undefined.
   */
  public readonly tsProperties: TabFolderProperties;

  public constructor(properties?: Properties<TabFolder>);

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: TabFolderEvents): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: TabFolderEvents): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: TabFolderEvents): this;
}

// TextInput

interface _TextInputProperties extends _WidgetProperties {

  /**
   * The horizontal alignment of the text.
   */
  alignment: "center" | "left" | "right";

  /**
   * Control how text input is capitalized.
   * `none` - Do not change any text input
   * `sentence` - Capitalize the first word of a sentence
   * `word` - Capitalize every word
   * `all` - Capitalize every letter
   * The boolean value `false` maps to `none` whereas `true` is equal to `all`.
   */
  autoCapitalize: "all" | false | "none" | "sentence" | true | "word";

  /**
   * Enables the spell checker and auto-correction feature.
   */
  autoCorrect: boolean;

  /**
   * The color of the border of the TextInput. On iOS this is a rectangular border around the TextInput,
   * on Android it is a single line below the TextInput.
   */
  borderColor: Color;

  /**
   * The color of the cursor in the `TextInput`.
   */
  cursorColor: Color;

  /**
   * Whether the text can be edited or not.
   */
  editable: boolean;

  /**
   * Label or icon to display on the keyboard 'confirmation' key. The key press can be captured via the
   * `accept` event. Setting an `enterKeyType` other than `default` will change the key behavior to not
   * close the keyboard automatically. The developer is able close the keyboard by removing the focus from
   * the `TextInput`.
   */
  enterKeyType: "default" | "done" | "go" | "next" | "search" | "send";

  /**
   * The color of the background of the TextInput - applies only to iOS.
   */
  fillColor: Color;

  /**
   * Reflects whether this widget has the keyboard focus. Setting this property to `true` will focus the
   * widget and open the virtual keyboard, setting it to `false` will remove the focus and hide the
   * virtual keyboard.
   */
  focused: boolean;

  /**
   * When `true` the `TextInput` will keep its focus, even when tapped outside of the widget bounds.
   */
  keepFocus: boolean;

  /**
   * Selects the keyboard type to use for editing this widget. Has no effect when `type` is set to
   * `multiline`.
   */
  keyboard: "ascii" | "decimal" | "default" | "email" | "number" | "numbersAndPunctuation" | "phone" | "url";

  /**
   * A hint text that is displayed when the input field is empty. Does not apply on iOS when `type` is set
   * to `multiline`.
   */
  message: string;

  /**
   * Makes the text visible when the `TextInput` has the type `password`.
   */
  revealPassword: boolean;

  /**
   * The text in the input field.
   */
  text: string;

  /**
   * The color of the text.
   */
  textColor: Color;

  /**
   * The type of the text widget. Windows 10 currently interprets `search`  as `default`.
   * @static
   */
  type: "default" | "multiline" | "password" | "search";
}
type TextInputProperties = Partial<_TextInputProperties>

interface TextInputEvents extends WidgetEvents {

  /**
   * Fired when a text input has been finished by pressing the keyboard's Enter key. The label of this key
   * may vary depending on the platform and locale.
   */
  accept?: (event: TextInputAcceptEvent) => void;

  /**
   * Fired when the widget lost focus.
   */
  blur?: (event: EventObject<TextInput>) => void;

  /**
   * Fired when the widget gains focus.
   */
  focus?: (event: EventObject<TextInput>) => void;

  /**
   * Fired when the text was changed by the user.
   */
  input?: (event: TextInputInputEvent) => void;

  /**
   * Fired when the [*alignment*](#alignment) property has changed.
   * @param value The new value of [*alignment*](#alignment).
   */
  alignmentChanged?: (event: PropertyChangedEvent<TextInput, string>) => void;

  /**
   * Fired when the [*autoCapitalize*](#autoCapitalize) property has changed.
   * @param value The new value of [*autoCapitalize*](#autoCapitalize).
   */
  autoCapitalizeChanged?: (event: PropertyChangedEvent<TextInput, any>) => void;

  /**
   * Fired when the [*autoCorrect*](#autoCorrect) property has changed.
   * @param value The new value of [*autoCorrect*](#autoCorrect).
   */
  autoCorrectChanged?: (event: PropertyChangedEvent<TextInput, boolean>) => void;

  /**
   * Fired when the [*borderColor*](#borderColor) property has changed.
   * @param value The new value of [*borderColor*](#borderColor).
   */
  borderColorChanged?: (event: PropertyChangedEvent<TextInput, Color>) => void;

  /**
   * Fired when the [*cursorColor*](#cursorColor) property has changed.
   * @param value The new value of [*cursorColor*](#cursorColor).
   */
  cursorColorChanged?: (event: PropertyChangedEvent<TextInput, Color>) => void;

  /**
   * Fired when the [*editable*](#editable) property has changed.
   * @param value The new value of [*editable*](#editable).
   */
  editableChanged?: (event: PropertyChangedEvent<TextInput, boolean>) => void;

  /**
   * Fired when the [*enterKeyType*](#enterKeyType) property has changed.
   * @param value The new value of [*enterKeyType*](#enterKeyType).
   */
  enterKeyTypeChanged?: (event: PropertyChangedEvent<TextInput, string>) => void;

  /**
   * Fired when the [*fillColor*](#fillColor) property has changed.
   * @param value The new value of [*fillColor*](#fillColor).
   */
  fillColorChanged?: (event: PropertyChangedEvent<TextInput, Color>) => void;

  /**
   * Fired when the [*focused*](#focused) property has changed.
   * @param value The new value of [*focused*](#focused).
   */
  focusedChanged?: (event: PropertyChangedEvent<TextInput, boolean>) => void;

  /**
   * Fired when the [*keepFocus*](#keepFocus) property has changed.
   * @param value The new value of [*keepFocus*](#keepFocus).
   */
  keepFocusChanged?: (event: PropertyChangedEvent<TextInput, boolean>) => void;

  /**
   * Fired when the [*keyboard*](#keyboard) property has changed.
   * @param value The new value of [*keyboard*](#keyboard).
   */
  keyboardChanged?: (event: PropertyChangedEvent<TextInput, string>) => void;

  /**
   * Fired when the [*message*](#message) property has changed.
   * @param value The new value of [*message*](#message).
   */
  messageChanged?: (event: PropertyChangedEvent<TextInput, string>) => void;

  /**
   * Fired when the [*revealPassword*](#revealPassword) property has changed.
   * @param value The new value of [*revealPassword*](#revealPassword).
   */
  revealPasswordChanged?: (event: PropertyChangedEvent<TextInput, boolean>) => void;

  /**
   * Fired when the [*text*](#text) property has changed.
   * @param value The new value of [*text*](#text).
   */
  textChanged?: (event: PropertyChangedEvent<TextInput, string>) => void;

  /**
   * Fired when the [*textColor*](#textColor) property has changed.
   * @param value The new value of [*textColor*](#textColor).
   */
  textColorChanged?: (event: PropertyChangedEvent<TextInput, Color>) => void;
}


interface TextInputAcceptEvent extends EventObject<TextInput> {
  readonly text: string;
}

interface TextInputInputEvent extends EventObject<TextInput> {
  readonly text: string;
}

/**
 * A widget that allows to enter text.
 */
interface TextInput extends _TextInputProperties {}
 export class TextInput extends Widget {


  /**
   * The type of this property defines the interface used by `set`, `get`, and
   * the `Properties` interface. It's value is always undefined.
   */
  public readonly tsProperties: TextInputProperties;

  public constructor(properties?: Properties<TextInput>);

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: TextInputEvents): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: TextInputEvents): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: TextInputEvents): this;
}

// TextView

interface _TextViewProperties extends _WidgetProperties {

  /**
   * The horizontal alignment of the text.
   */
  alignment: "center" | "left" | "right";

  /**
   * The amount of space between each line of text. The `lineSpacing` property is a factor with a default
   * value of `1.0`.
   */
  lineSpacing: number;

  /**
   * Allows for a subset of HTML tags in the text. Supported tags are: `a`, `del`, `ins`, `b`, `i`,
   * `strong`, `em`, `big`, `small`, `br`. All tags must be closed (e.g. use `<br/>` instead of `<br>`).
   * Nesting tags is currently not supported.
   * @static
   */
  markupEnabled: boolean;

  /**
   * Limit the number of lines to be displayed to the given maximum. `null` disables this limit.
   */
  maxLines: number|null;

  /**
   * Whether the text can be selected or not. Currently only support on Android.
   */
  selectable: boolean;

  /**
   * The text to display.
   */
  text: string;

  /**
   * The color of the text.
   */
  textColor: Color;
}
type TextViewProperties = Partial<_TextViewProperties>

interface TextViewEvents extends WidgetEvents {

  /**
   * Fired when the [*alignment*](#alignment) property has changed.
   * @param value The new value of [*alignment*](#alignment).
   */
  alignmentChanged?: (event: PropertyChangedEvent<TextView, string>) => void;

  /**
   * Fired when the [*lineSpacing*](#lineSpacing) property has changed.
   * @param value The new value of [*lineSpacing*](#lineSpacing).
   */
  lineSpacingChanged?: (event: PropertyChangedEvent<TextView, number>) => void;

  /**
   * Fired when the [*maxLines*](#maxLines) property has changed.
   * @param value The new value of [*maxLines*](#maxLines).
   */
  maxLinesChanged?: (event: PropertyChangedEvent<TextView, number|null>) => void;

  /**
   * Fired when the [*selectable*](#selectable) property has changed.
   * @param value The new value of [*selectable*](#selectable).
   */
  selectableChanged?: (event: PropertyChangedEvent<TextView, boolean>) => void;

  /**
   * Fired when the [*text*](#text) property has changed.
   * @param value The new value of [*text*](#text).
   */
  textChanged?: (event: PropertyChangedEvent<TextView, string>) => void;

  /**
   * Fired when the [*textColor*](#textColor) property has changed.
   * @param value The new value of [*textColor*](#textColor).
   */
  textColorChanged?: (event: PropertyChangedEvent<TextView, Color>) => void;
}


/**
 * A widget to display a text. For images, use ImageView.
 */
interface TextView extends _TextViewProperties {}
 export class TextView extends Widget {


  /**
   * The type of this property defines the interface used by `set`, `get`, and
   * the `Properties` interface. It's value is always undefined.
   */
  public readonly tsProperties: TextViewProperties;

  public constructor(properties?: Properties<TextView>);

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: TextViewEvents): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: TextViewEvents): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: TextViewEvents): this;
}

// ToggleButton

interface _ToggleButtonProperties extends _WidgetProperties {

  /**
   * The horizontal alignment of the button text.
   */
  alignment: "center" | "left" | "right";

  /**
   * The checked state of the toggle button.
   */
  checked: boolean;

  /**
   * An image to be displayed on the button.
   */
  image: Image|null;

  /**
   * The button's label text.
   */
  text: string;

  /**
   * The color of the text.
   */
  textColor: Color;
}
type ToggleButtonProperties = Partial<_ToggleButtonProperties>

interface ToggleButtonEvents extends WidgetEvents {

  /**
   * Fired when the toggle button is selected or deselected by the user.
   */
  select?: (event: ToggleButtonSelectEvent) => void;

  /**
   * Fired when the [*alignment*](#alignment) property has changed.
   * @param value The new value of [*alignment*](#alignment).
   */
  alignmentChanged?: (event: PropertyChangedEvent<ToggleButton, string>) => void;

  /**
   * Fired when the [*checked*](#checked) property has changed.
   * @param value The new value of [*checked*](#checked).
   */
  checkedChanged?: (event: PropertyChangedEvent<ToggleButton, boolean>) => void;

  /**
   * Fired when the [*image*](#image) property has changed.
   * @param value The new value of [*image*](#image).
   */
  imageChanged?: (event: PropertyChangedEvent<ToggleButton, Image>) => void;

  /**
   * Fired when the [*text*](#text) property has changed.
   * @param value The new value of [*text*](#text).
   */
  textChanged?: (event: PropertyChangedEvent<ToggleButton, string>) => void;

  /**
   * Fired when the [*textColor*](#textColor) property has changed.
   * @param value The new value of [*textColor*](#textColor).
   */
  textColorChanged?: (event: PropertyChangedEvent<ToggleButton, Color>) => void;
}


interface ToggleButtonSelectEvent extends EventObject<ToggleButton> {
  readonly checked: boolean;
}

/**
 * A push button that "snaps in", i.e. it is selected when pressed and deselected when pressed again.
 */
interface ToggleButton extends _ToggleButtonProperties {}
 export class ToggleButton extends Widget {


  /**
   * The type of this property defines the interface used by `set`, `get`, and
   * the `Properties` interface. It's value is always undefined.
   */
  public readonly tsProperties: ToggleButtonProperties;

  public constructor(properties?: Properties<ToggleButton>);

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: ToggleButtonEvents): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: ToggleButtonEvents): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: ToggleButtonEvents): this;
}

// Video

interface _VideoProperties extends _WidgetProperties {

  /**
   * If set to `true`, starts playing the video as soon as the state changes from `open` to `ready`.
   */
  autoPlay: boolean;

  /**
   * If set to `true`, overlays the video with a native UI for controlling playback.
   */
  controlsVisible: boolean;

  /**
   * The URL of the video to play. Setting this property to any non-empty string changes the
   * *[state](#state)* to `open` and the video starts loading. Setting this property to an empty string
   * unloads the current video and the *[state](#state)* returns to `empty`.
   */
  url: string;
}
type VideoProperties = Partial<_VideoProperties>

interface VideoEvents extends WidgetEvents {

  /**
   * Fired when the [*autoPlay*](#autoPlay) property has changed.
   * @param value The new value of [*autoPlay*](#autoPlay).
   */
  autoPlayChanged?: (event: PropertyChangedEvent<Video, boolean>) => void;

  /**
   * Fired when the [*controlsVisible*](#controlsVisible) property has changed.
   * @param value The new value of [*controlsVisible*](#controlsVisible).
   */
  controlsVisibleChanged?: (event: PropertyChangedEvent<Video, boolean>) => void;

  /**
   * Fired when the [*duration*](#duration) property has changed.
   * @param value The new value of [*duration*](#duration).
   */
  durationChanged?: (event: PropertyChangedEvent<Video, number>) => void;

  /**
   * Fired when the [*position*](#position) property has changed.
   * @param value The new value of [*position*](#position).
   */
  positionChanged?: (event: PropertyChangedEvent<Video, number>) => void;

  /**
   * Fired when the [*speed*](#speed) property has changed.
   * @param value The new value of [*speed*](#speed).
   */
  speedChanged?: (event: PropertyChangedEvent<Video, number>) => void;

  /**
   * Fired when the [*state*](#state) property has changed.
   * @param value The new value of [*state*](#state).
   */
  stateChanged?: (event: PropertyChangedEvent<Video, string>) => void;

  /**
   * Fired when the [*url*](#url) property has changed.
   * @param value The new value of [*url*](#url).
   */
  urlChanged?: (event: PropertyChangedEvent<Video, string>) => void;
}


/**
 * A widget that plays a video from an URL.
 */
interface Video extends _VideoProperties {}
 export class Video extends Widget {


  /**
   * The type of this property defines the interface used by `set`, `get`, and
   * the `Properties` interface. It's value is always undefined.
   */
  public readonly tsProperties: VideoProperties;

  public constructor(properties?: Properties<Video>);

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: VideoEvents): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: VideoEvents): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: VideoEvents): this;

  /**
   * Pauses the video. *[state](#state)* changes to `pause` and `speed` to `0`. Has no effect when
   * *[state](#state)* is not `play`.
   */
  pause(): void;

  /**
   * Starts playing the video, *[state](#state)* changes to `play`. Has no effect unless the current state
   * is either `pause` or `ready`.
   * @param speed Desired playback speed. If the given speed is not supported by the platform or video, the actual playback speed will be `1` - i.e. the natural speed of the video.
   */
  play(speed?: number): void;

  /**
   * Attempts to change the `position` to the given time index. Success depends on the currently loaded
   * video. Has no effect if the current *[state](#state)* is `empty` or `fail`.
   * @param position Desired position in milliseconds.
   */
  seek(position: number): void;

  /**
   * Returns the full length of the current video in milliseconds.
   */
  readonly duration: number;

  /**
   * Returns the current playback position in milliseconds. This property does not trigger any change
   * events.
   */
  readonly position: number;

  /**
   * Returns the current playback speed. The value `1` represents the natural speed of the video. When the
   * *[state](#state)* of the widget is not `play` this property always has the value `0`.
   */
  readonly speed: number;

  /**
   * The current state of the widget.
   */
  readonly state: "empty" | "fail" | "finish" | "open" | "pause" | "play" | "ready" | "stale";
}

// WebView

interface _WebViewProperties extends _WidgetProperties {

  /**
   * A complete HTML document to display. Always returns the last set value.
   */
  html: string;

  /**
   * The URL of the web page to display. Relative URLs are resolved relative to 'package.json'. Returns
   * empty string when content from *html* property is displayed.
   */
  url: string;
}
type WebViewProperties = Partial<_WebViewProperties>

interface WebViewEvents extends WidgetEvents {

  /**
   * Fired when the WebView requests a download. The download event provides the properties `url`,
   * `mimeType`, `contentLength` and `contentDisposition`. Supported only on Android.
   */
  download?: (event: WebViewDownloadEvent) => void;

  /**
   * Fired when the url has been loaded.
   */
  load?: (event: EventObject<WebView>) => void;

  /**
   * Fired when a web message has been sent via `window.parent.postMessage(message, targetOrigin)` from
   * inside the `WebView`.
   */
  message?: (event: WebViewMessageEvent) => void;

  /**
   * Fired when the WebView is about to navigate to a new URL.
   */
  navigate?: (event: WebViewNavigateEvent) => void;

  /**
   * Fired when the [*canGoBack*](#canGoBack) property has changed.
   * @param value The new value of [*canGoBack*](#canGoBack).
   */
  canGoBackChanged?: (event: PropertyChangedEvent<WebView, boolean>) => void;

  /**
   * Fired when the [*canGoForward*](#canGoForward) property has changed.
   * @param value The new value of [*canGoForward*](#canGoForward).
   */
  canGoForwardChanged?: (event: PropertyChangedEvent<WebView, boolean>) => void;

  /**
   * Fired when the [*html*](#html) property has changed.
   * @param value The new value of [*html*](#html).
   */
  htmlChanged?: (event: PropertyChangedEvent<WebView, string>) => void;

  /**
   * Fired when the [*url*](#url) property has changed.
   * @param value The new value of [*url*](#url).
   */
  urlChanged?: (event: PropertyChangedEvent<WebView, string>) => void;
}


interface WebViewDownloadEvent extends EventObject<WebView> {
  readonly contentDisposition: string;
  readonly contentLength: number;
  readonly mimeType: string;
  readonly url: string;
}

interface WebViewMessageEvent extends EventObject<WebView> {
  readonly data: string;
}

interface WebViewNavigateEvent extends EventObject<WebView> {
  readonly preventDefault: () => void;
  readonly url: string;
}

/**
 * A widget that can display a web page. Since this widget requires a lot of resources it's recommended
 * to have no more than one instance at a time.
 */
interface WebView extends _WebViewProperties {}
 export class WebView extends Widget {


  /**
   * The type of this property defines the interface used by `set`, `get`, and
   * the `Properties` interface. It's value is always undefined.
   */
  public readonly tsProperties: WebViewProperties;

  public constructor(properties?: Properties<WebView>);

  /**
   * Navigate the `WebView` to the previous page if possible.
   */
  goBack(): void;

  /**
   * Navigate the `WebView` to the next page if possible.
   */
  goForward(): void;

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: WebViewEvents): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: WebViewEvents): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: WebViewEvents): this;

  /**
   * Posts a web message to the underlying `window` object of the WebView. The website in the `WebView`
   * can register for the message in the following fashion: `window.addEventListener('message',
   * callbackFunction)`. For more information see
   * [`Window.postMessage()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) API.
   * @param message The message to send. Currently supports only strings.
   * @param targetOrigin The URL of the page that receives the message. The message is only sent if the current document URL has the same scheme, domain and path. Use `*` to send to any URL.
   */
  postMessage(message: string, targetOrigin: string): this;

  /**
   * Whether there is a previous to navigated to via `goBack()`.
   */
  readonly canGoBack: boolean;

  /**
   * Whether there is a next page to navigate to via `goForward()`.
   */
  readonly canGoForward: boolean;
}

// Widget

interface _WidgetProperties extends _NativeObjectProperties {

  /**
   * Background color of the widget.
   */
  background: Color;

  /**
   * An image to be displayed on the widget's background. If the image is smaller than the widget, it will
   * be tiled.
   */
  backgroundImage: Image;

  /**
   * The vertical position of the widget's baseline relative to a sibling widget.
   */
  baseline: Widget|Selector;

  /**
   * The position of the widget's bottom edge relative to the parent or a sibling widget.
   */
  bottom: margin;

  /**
   * The horizontal position of the widget's center relative to the parent's center.
   */
  centerX: offset;

  /**
   * The vertical position of the widget's center relative to the parent's center.
   */
  centerY: offset;

  /**
   * A class name or a whitespace separated list of class names to identify the widget. Class names are
   * arbitrary strings that describe a state or a category and help to select widgets using a selector
   * expression. A class name may only contain alphanumeric characters, `_` and `-`. Class names can also
   * be added or removed using the field `classList`.
   */
  class: string;

  /**
   * Provides convenient access to the list of class names set to this widget. Class names can either be
   * set using the `class` property or by modifying the `classList` directly.
   */
  classList: string[];

  /**
   * Configure a widget to have rounded corners. Each corner is affected equally. Supported on iOS and
   * Android 5.0+.
   */
  cornerRadius: number;

  /**
   * The position of the widget on the z-axis. Supported on iOS and Android 5.0+.
   */
  elevation: number;

  /**
   * Whether the widget can be operated.
   */
  enabled: boolean;

  /**
   * The font used for the widget.
   */
  font: Font|null;

  /**
   * The height of the widget.
   */
  height: dimension;

  /**
   * Whether the widget should show visual feedback while touched. Enabling `highlightOnTouch` will not
   * prevent the touch event from being propagated to the parent widget.
   */
  highlightOnTouch: boolean;

  /**
   * A string to identify the widget by using selectors. IDs are optional. It is strongly recommended that
   * they are unique within a page.
   */
  id: string;

  /**
   * Shorthand for all layout properties. See [Layout](../layout.md).
   */
  layoutData: LayoutData;

  /**
   * The position of the widget's left edge relative to the parent or a sibling widget.
   */
  left: margin;

  /**
   * Opacity of the entire widget, in the range `[0..1]`. Can be used for fade animations.
   */
  opacity: number;

  /**
   * The position of the widget's right edge relative to the parent or a sibling widget.
   */
  right: margin;

  /**
   * The position of the widget's top edge relative to the parent or a sibling widget.
   */
  top: margin;

  /**
   * Modifications to the widget's shape, size, or position. Can be used for animations. **Note:** In
   * Android the *transform* property does not affect the *bounds* property, while it does so in iOS.
   */
  transform: Transformation;

  /**
   * Whether the widget is visible.
   */
  visible: boolean;

  /**
   * The width of the widget.
   */
  width: dimension;

  /**
   * Controls the color scheme used for this widget. When set to `"default"` the theme is inherited from
   * either the parent (if present) or the OS settings. Available only on windows.
   */
  win_theme: "dark" | "default" | "light";
}
type WidgetProperties = Partial<_WidgetProperties>

interface WidgetEvents extends NativeObjectEvents {

  /**
   * Fired when the widget is about to be disposed. At this point the widget and its children are still
   * accessible.
   */
  dispose?: (event: EventObject<Widget>) => void;

  /**
   * Fired after pressing a widget for a specific amount of time (about a second), and again on lifting
   * the finger.
   */
  longpress?: (event: WidgetLongpressEvent) => void;

  /**
   * Fired continuously after a finger touching the widget moved for a certain distance.
   */
  pan?: (event: WidgetPanEvent) => void;

  /**
   * Fired when a finger starts moving down.
   */
  panDown?: (event: WidgetPanEvent) => void;

  /**
   * Fired when a finger starts moving left or right.
   */
  panHorizontal?: (event: WidgetPanEvent) => void;

  /**
   * Fired when a finger starts moving left.
   */
  panLeft?: (event: WidgetPanEvent) => void;

  /**
   * Fired when a finger starts moving right.
   */
  panRight?: (event: WidgetPanEvent) => void;

  /**
   * Fired when a finger starts moving up.
   */
  panUp?: (event: WidgetPanEvent) => void;

  /**
   * Fired when a finger starts moving up or down.
   */
  panVertical?: (event: WidgetPanEvent) => void;

  /**
   * Fired when the widget's size has changed. You can use this event to apply new
   * [*layoutData*](#layoutdata).
   */
  resize?: (event: WidgetResizeEvent) => void;

  /**
   * Fired when a finger moves down quickly.
   */
  swipeDown?: (event: WidgetSwipeEvent) => void;

  /**
   * Fired when a finger moves left quickly.
   */
  swipeLeft?: (event: WidgetSwipeEvent) => void;

  /**
   * Fired when a finger moves right quickly.
   */
  swipeRight?: (event: WidgetSwipeEvent) => void;

  /**
   * Fired when a finger moves up quickly.
   */
  swipeUp?: (event: WidgetSwipeEvent) => void;

  /**
   * Fired once when a finger briefly touched the widget.
   */
  tap?: (event: WidgetTapEvent) => void;

  /**
   * Fired instead of touchEnd when the touch ends on another widget than it started on.
   */
  touchCancel?: (event: WidgetTouchEvent) => void;

  /**
   * Fired when a touch ends on the same widget than it started on.
   */
  touchEnd?: (event: WidgetTouchEvent) => void;

  /**
   * Fired repeatedly while swiping across the screen.
   */
  touchMove?: (event: WidgetTouchEvent) => void;

  /**
   * Fired when a widget is touched. See [Touch Events](../touch.md).
   */
  touchStart?: (event: WidgetTouchEvent) => void;

  /**
   * Fired when the [*background*](#background) property has changed.
   * @param value The new value of [*background*](#background).
   */
  backgroundChanged?: (event: PropertyChangedEvent<Widget, Color>) => void;

  /**
   * Fired when the [*backgroundImage*](#backgroundImage) property has changed.
   * @param value The new value of [*backgroundImage*](#backgroundImage).
   */
  backgroundImageChanged?: (event: PropertyChangedEvent<Widget, Image>) => void;

  /**
   * Fired when the [*baseline*](#baseline) property has changed.
   * @param value The new value of [*baseline*](#baseline).
   */
  baselineChanged?: (event: PropertyChangedEvent<Widget, Widget|Selector>) => void;

  /**
   * Fired when the [*bottom*](#bottom) property has changed.
   * @param value The new value of [*bottom*](#bottom).
   */
  bottomChanged?: (event: PropertyChangedEvent<Widget, margin>) => void;

  /**
   * Fired when the [*bounds*](#bounds) property has changed.
   * @param value The new value of [*bounds*](#bounds).
   */
  boundsChanged?: (event: PropertyChangedEvent<Widget, Bounds>) => void;

  /**
   * Fired when the [*centerX*](#centerX) property has changed.
   * @param value The new value of [*centerX*](#centerX).
   */
  centerXChanged?: (event: PropertyChangedEvent<Widget, offset>) => void;

  /**
   * Fired when the [*centerY*](#centerY) property has changed.
   * @param value The new value of [*centerY*](#centerY).
   */
  centerYChanged?: (event: PropertyChangedEvent<Widget, offset>) => void;

  /**
   * Fired when the [*class*](#class) property has changed.
   * @param value The new value of [*class*](#class).
   */
  classChanged?: (event: PropertyChangedEvent<Widget, string>) => void;

  /**
   * Fired when the [*classList*](#classList) property has changed.
   * @param value The new value of [*classList*](#classList).
   */
  classListChanged?: (event: PropertyChangedEvent<Widget, string[]>) => void;

  /**
   * Fired when the [*cornerRadius*](#cornerRadius) property has changed.
   * @param value The new value of [*cornerRadius*](#cornerRadius).
   */
  cornerRadiusChanged?: (event: PropertyChangedEvent<Widget, number>) => void;

  /**
   * Fired when the [*data*](#data) property has changed.
   * @param value The new value of [*data*](#data).
   */
  dataChanged?: (event: PropertyChangedEvent<Widget, object>) => void;

  /**
   * Fired when the [*elevation*](#elevation) property has changed.
   * @param value The new value of [*elevation*](#elevation).
   */
  elevationChanged?: (event: PropertyChangedEvent<Widget, number>) => void;

  /**
   * Fired when the [*enabled*](#enabled) property has changed.
   * @param value The new value of [*enabled*](#enabled).
   */
  enabledChanged?: (event: PropertyChangedEvent<Widget, boolean>) => void;

  /**
   * Fired when the [*font*](#font) property has changed.
   * @param value The new value of [*font*](#font).
   */
  fontChanged?: (event: PropertyChangedEvent<Widget, Font>) => void;

  /**
   * Fired when the [*height*](#height) property has changed.
   * @param value The new value of [*height*](#height).
   */
  heightChanged?: (event: PropertyChangedEvent<Widget, dimension>) => void;

  /**
   * Fired when the [*highlightOnTouch*](#highlightOnTouch) property has changed.
   * @param value The new value of [*highlightOnTouch*](#highlightOnTouch).
   */
  highlightOnTouchChanged?: (event: PropertyChangedEvent<Widget, boolean>) => void;

  /**
   * Fired when the [*id*](#id) property has changed.
   * @param value The new value of [*id*](#id).
   */
  idChanged?: (event: PropertyChangedEvent<Widget, string>) => void;

  /**
   * Fired when the [*layoutData*](#layoutData) property has changed.
   * @param value The new value of [*layoutData*](#layoutData).
   */
  layoutDataChanged?: (event: PropertyChangedEvent<Widget, LayoutData>) => void;

  /**
   * Fired when the [*left*](#left) property has changed.
   * @param value The new value of [*left*](#left).
   */
  leftChanged?: (event: PropertyChangedEvent<Widget, margin>) => void;

  /**
   * Fired when the [*opacity*](#opacity) property has changed.
   * @param value The new value of [*opacity*](#opacity).
   */
  opacityChanged?: (event: PropertyChangedEvent<Widget, number>) => void;

  /**
   * Fired when the [*right*](#right) property has changed.
   * @param value The new value of [*right*](#right).
   */
  rightChanged?: (event: PropertyChangedEvent<Widget, margin>) => void;

  /**
   * Fired when the [*top*](#top) property has changed.
   * @param value The new value of [*top*](#top).
   */
  topChanged?: (event: PropertyChangedEvent<Widget, margin>) => void;

  /**
   * Fired when the [*transform*](#transform) property has changed.
   * @param value The new value of [*transform*](#transform).
   */
  transformChanged?: (event: PropertyChangedEvent<Widget, Transformation>) => void;

  /**
   * Fired when the [*visible*](#visible) property has changed.
   * @param value The new value of [*visible*](#visible).
   */
  visibleChanged?: (event: PropertyChangedEvent<Widget, boolean>) => void;

  /**
   * Fired when the [*width*](#width) property has changed.
   * @param value The new value of [*width*](#width).
   */
  widthChanged?: (event: PropertyChangedEvent<Widget, dimension>) => void;

  /**
   * Fired when the [*win_theme*](#win_theme) property has changed.
   * @param value The new value of [*win_theme*](#win_theme).
   */
  win_themeChanged?: (event: PropertyChangedEvent<Widget, string>) => void;
}


interface WidgetLongpressEvent extends EventObject<Widget> {
  readonly state: 'start'|'end'|'cancel';
  readonly touches: {x: number, y: number}[];
}

interface WidgetPanEvent extends EventObject<Widget> {
  readonly state: 'start'|'change'|'end'|'cancel';
  readonly touches: {x: number, y: number}[];
  readonly translationX: number;
  readonly translationY: number;
  readonly velocityX: number;
  readonly velocityY: number;
}

interface WidgetResizeEvent extends EventObject<Widget> {
  readonly height: number;
  readonly left: number;
  readonly top: number;
  readonly width: number;
}

interface WidgetSwipeEvent extends EventObject<Widget> {
  readonly touches: {x: number, y: number}[];
}

interface WidgetTapEvent extends EventObject<Widget> {
  readonly touches: {x: number, y: number}[];
}

interface WidgetTouchEvent extends EventObject<Widget> {
  readonly touches: {x: number, y: number, absoluteX: number, absoluteY: number}[];
}

/**
 * Base class for all widgets
 */
interface Widget extends _WidgetProperties {}
 export class Widget extends NativeObject {


  /**
   * The type of this property defines the interface used by `set`, `get`, and
   * the `Properties` interface. It's value is always undefined.
   */
  public readonly tsProperties: WidgetProperties;

  protected constructor(properties?: Properties<Widget>);

  /**
   * Identical to the `apply` method, but intended to be used by subclasses in case the `children` method
   * was overwritten . See `children` for details.
   * @param properties An object in the format `{Selector: {property: value, property: value, ... }, Selector: ...}`
   */
  protected _apply(properties: {[selector: string]: WidgetProperties & {[k: string]: any}}): this;

  /**
   * Identical to the `children` method, but intended to be used by subclasses in case the `children`
   * method was overwritten. See `children` for details.
   * @param selector A selector expression or a predicate function to filter the results.
   */
  protected _children(selector?: Selector): WidgetCollection<Widget>;

  /**
   * Identical to the `children` method, but intended to be used by subclasses in case the `children`
   * method was overwritten. See `children` for details.
   * @param constructor A class to filter the results.
   */
  protected _children<U extends Widget>(constructor: { new (...args: any[]): U }): WidgetCollection<U>;

  /**
   * Identical to the `find` method, but intended to be used by subclasses in case the `children` method
   * was overwritten. See `children` for details.
   * @param selector A selector expression or a predicate function to filter the results.
   */
  protected _find(selector?: Selector): WidgetCollection<Widget>;

  /**
   * Identical to the `find` method, but intended to be used by subclasses in case the `children` method
   * was overwritten. See `children` for details.
   * @param constructor A class to filter the results.
   */
  protected _find<U extends Widget>(constructor: { new (...args: any[]): U }): WidgetCollection<U>;

  /**
   * Starts an animation that transforms the given properties from their current values to the given ones.
   * Supported properties are *transform* and *opacity*. Returns a promise that is resolved once the
   * animation is completed and is rejected if the animation is aborted.
   * @param properties The properties and target values to animate.
   * @param options Configures the animation itself.
   */
  animate(properties: {transform?: Transformation, opacity?: number}, options: AnimationOptions): Promise<any>;

  /**
   * Appends this widget to the given parent. The parent widget must support children (extending
   * *Composite*). If the widget already has a parent, it is removed from the old parent.
   * @param parent 
   */
  appendTo(parent: Composite): this;

  /**
   * Applies the given properties to all descendants that match the associated selector(s).
   * If you wish to always exclude specific "internal" children from this, overwrite the `children` method
   * on their parent. See `children` for details.
   * @param properties An object in the format `{Selector: {property: value, property: value, ... }, Selector: ...}`
   */
  apply(properties: {[selector: string]: WidgetProperties & {[k: string]: any}}): this;

  /**
   * Returns a (possibly empty) collection of all children of this widget that match the given selector.
   * When writing custom UI components it may be useful to overwrite this method to prevent access to the
   * internal children by external code. Doing so also affects `find` and `apply`, on this widget as well
   * as on all parents, thereby preventing accidental clashes of widget id or class values. See also
   * `_children`, `_find` and `_apply`.
   * @param selector A selector expression or a predicate function to filter the results.
   */
  children(selector?: Selector): WidgetCollection<Widget>;

  /**
   * Returns a collection containing all children of all widgets in this collection that are instances of
   * the given class.
   * @param constructor A class to filter the results.
   */
  children<U extends Widget>(constructor: { new (...args: any[]): U }): WidgetCollection<U>;

  /**
   * Removes this widget from its parent.
   */
  detach(): this;

  /**
   * Removes this widget from its parent and destroys it. Also disposes of all its children. Triggers a
   * `remove` event on the parent and a `dispose` event on itself. The widget can no longer be used.
   */
  dispose(): void;

  /**
   * Returns a collection containing all descendants of all widgets in this collection that match the
   * given selector.
   * If you wish to always exclude specific "internal" children from the result, overwrite the `children`
   * method on their parent. See `children` for details.
   * @param selector A selector expression or a predicate function to filter the results.
   */
  find(selector?: Selector): WidgetCollection<Widget>;

  /**
   * Returns a collection containing all descendants of all widgets in this collection that match the
   * given selector.
   * If you wish to always exclude  specific "internal" children from the result, overwrite the `children`
   * method on their parent. See `children` for details.
   * @param constructor A class to filter the results.
   */
  find<U extends Widget>(constructor: { new (...args: any[]): U }): WidgetCollection<U>;

  /**
   * Inserts this widget directly after the given widget. If the widget already has a parent, it is
   * removed from the old parent.
   * @param widget 
   */
  insertAfter(widget: Widget): this;

  /**
   * Inserts this widget directly before the given widget. If the widget already has a parent, it is
   * removed from the old parent.
   * @param widget 
   */
  insertBefore(widget: Widget): this;

  /**
   * Returns `true` if the widget has been disposed, otherwise `false`.
   */
  isDisposed(): boolean;

  /**
   * Removes all occurrences of *listener* that are bound to *type* and *context* from this widget.
   * @param type The type of events to remove listeners for.
   * @param listener The listener function to remove.
   * @param context The context of the bound listener to remove.
   */
  off(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Removes all listeners in the given object from the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to deregister from these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  off(listeners: WidgetEvents): this;

  /**
   * Registers a *listener* function to be notified of events of the given *type*.
   * @param type The type of events to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  on(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Registers all listeners in the given object for the event type indicated by their key.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  on(listeners: WidgetEvents): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param type The type of the event to listen for.
   * @param listener The listener function to register. This function will be called with an event object.
   * @param context In the listener function, `this` will point to this object. If not present, the listener will be called in the context of this object.
   */
  once(type: string, listener: (event: any) => void, context?: object): this;

  /**
   * Same as `on`, but removes the listener after it has been invoked by an event.
   * @param listeners A key-value map where the keys are event types and the values are the listeners to register for these events, e.g. `{tap: onTap, scroll: onScroll}`.
   */
  once(listeners: WidgetEvents): this;

  /**
   * Returns the parent of this widget or `null` if this widget is not appended to a parent.
   */
  parent(): Composite;

  /**
   * Returns a (possibly empty) collection of all siblings of this widget that match the given selector.
   * @param selector A selector expression or a predicate function to filter the results.
   */
  siblings(selector?: Selector): WidgetCollection<Widget>;

  /**
   * Returns a (possibly empty) collection of all siblings of this widget that are instances of the given
   * class.
   * @param constructor A class to filter the results.
   */
  siblings<U extends Widget>(constructor: { new (...args: any[]): U }): WidgetCollection<U>;

  /**
   * The actual location and size of the widget, relative to its parent.
   */
  readonly bounds: Bounds;

  /**
   * A general-purpose object that allows the application to attach arbitrary data to the widget.
   * Manipulations on this object have no effect on the widget itself in any way. Example:
   * `widget.data.myData = myData;`
   */
  readonly data: {[k: string]: any};
}

